{"version":3,"file":"static/js/1810.2e415f64.chunk.js","mappings":"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","sources":["../node_modules/@radix-ui/react-checkbox/dist/packages/react/checkbox/src/Checkbox.tsx","../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx","components/ui/checkbox.tsx","../node_modules/@radix-ui/react-separator/dist/packages/react/separator/src/Separator.tsx","components/ui/separator.tsx","login/pages/Login.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = button?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [button, setChecked]);\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={isIndeterminate(checked) ? false : checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps };\n","import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n","import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"@radix-ui/react-icons\"\n\nimport { cn } from \"lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <CheckIcon className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n *  Separator\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Separator';\nconst DEFAULT_ORIENTATION = 'horizontal';\nconst ORIENTATIONS = ['horizontal', 'vertical'] as const;\n\ntype Orientation = typeof ORIENTATIONS[number];\ntype SeparatorElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SeparatorProps extends PrimitiveDivProps {\n  /**\n   * Either `vertical` or `horizontal`. Defaults to `horizontal`.\n   */\n  orientation?: Orientation;\n  /**\n   * Whether or not the component is purely decorative. When true, accessibility-related attributes\n   * are updated so that that the rendered element is removed from the accessibility tree.\n   */\n  decorative?: boolean;\n}\n\nconst Separator = React.forwardRef<SeparatorElement, SeparatorProps>((props, forwardedRef) => {\n  const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;\n  const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;\n  // `aria-orientation` defaults to `horizontal` so we only need it if `orientation` is vertical\n  const ariaOrientation = orientation === 'vertical' ? orientation : undefined;\n  const semanticProps = decorative\n    ? { role: 'none' }\n    : { 'aria-orientation': ariaOrientation, role: 'separator' };\n\n  return (\n    <Primitive.div\n      data-orientation={orientation}\n      {...semanticProps}\n      {...domProps}\n      ref={forwardedRef}\n    />\n  );\n});\n\nSeparator.displayName = NAME;\n\nSeparator.propTypes = {\n  orientation(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidOrientation(propValue)) {\n      return new Error(getInvalidOrientationError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidOrientationError(value: string, componentName: string) {\n  return `Invalid prop \\`orientation\\` of value \\`${value}\\` supplied to \\`${componentName}\\`, expected one of:\n  - horizontal\n  - vertical\n\nDefaulting to \\`${DEFAULT_ORIENTATION}\\`.`;\n}\n\nfunction isValidOrientation(orientation: any): orientation is Orientation {\n  return ORIENTATIONS.includes(orientation);\n}\n\nconst Root = Separator;\n\nexport {\n  Separator,\n  //\n  Root,\n};\nexport type { SeparatorProps };\n","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import {useState, type FormEventHandler} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\nimport {Button, buttonVariants} from \"../../components/ui/button\";\nimport {Checkbox} from \"../../components/ui/checkbox\";\nimport {cn} from \"../../lib/utils\";\nimport {Label} from \"../../components/ui/label\";\nimport {Separator} from \"../../components/ui/separator\";\nimport {GitHubLogoIcon} from '@radix-ui/react-icons'\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {social, realm, url, usernameHidden, login, auth, registrationDisabled} = kcContext;\n\n    const {msg, msgStr} = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\" className={\"justify-center items-center text-center\"}>\n                        <Separator className={\"mb-3\"}/>\n                        <span className={\"text-slate-500 text-sm\"}>\n                            {msg(\"noAccount\")} {' '}\n                            <a tabIndex={6} href={url.registrationUrl} className={\"text-slate-950\"}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"lg:p-8 lg:pb-4 flex gap-4\">\n                <div className={`mx-auto flex w-full flex-col justify-center sm:w-[350px] `}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\"\n                              className={\"grid gap-3 items-center\"}>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                                <Label htmlFor=\"autoCompleteHelper\"> {msg(label)}</Label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n\n                                <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                    <Label htmlFor=\"password\">{msg(\"password\")}</Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Checkbox id=\"terms2\" defaultChecked={login.rememberMe === \"on\"}/>\n                                            <label\n                                                htmlFor=\"terms2\"\n                                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                            >\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n\n                                    )}\n                                </div>\n\n                            </div>\n\n                            <input\n                                type=\"hidden\"\n                                id=\"id-hidden-input\"\n                                name=\"credentialId\"\n                                {...(auth?.selectedCredential !== undefined\n                                    ? {\n                                        \"value\": auth.selectedCredential\n                                    }\n                                    : {})}\n                            />\n                            <Button\n                                tabIndex={4}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                disabled={isLoginButtonDisabled}\n                            >\n                                {msgStr(\"doLogIn\")}\n                            </Button>\n\n\n                        </form>\n                    )}\n                    {realm.resetPasswordAllowed && (\n                        <span className={\"text-sm mt-3 text-slate-500\"}>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={'flex gap-4'}\n                    >\n\n                        <Separator orientation=\"vertical\"/>\n                        <ul\n                            className={\"grid grid-cols-2 gap-2\"}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <Button onClick={() => window.open(p.loginUrl)} id={`zocial-${p.alias}`}\n                                            className={`${buttonVariants({variant: \"secondary\"})} w-full flex justify-start gap-2`}>\n                                        <GitHubLogoIcon/>\n                                        <span>{p.displayName}</span>\n                                    </Button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["$e698a72e93240346$var$CHECKBOX_NAME","$e698a72e93240346$var$createCheckboxContext","$e698a72e93240346$export$b566c4ff5488ea01","$1bpvS$createContextScope","$e698a72e93240346$var$CheckboxProvider","$e698a72e93240346$var$useCheckboxContext","$e698a72e93240346$export$48513f6b9f8ce62d","$1bpvS$forwardRef","props","forwardedRef","__scopeCheckbox","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","checkboxProps","button","setButton","$1bpvS$useState","composedRefs","$1bpvS$useComposedRefs","node","hasConsumerStoppedPropagationRef","$1bpvS$useRef","isFormControl","Boolean","closest","setChecked","$1bpvS$useControllableState","prop","defaultProp","onChange","initialCheckedStateRef","$1bpvS$useEffect","form","reset","current","addEventListener","removeEventListener","$1bpvS$createElement","scope","state","$1bpvS$Primitive","$1bpvS$babelruntimehelpersesmextends","type","role","$e698a72e93240346$var$isIndeterminate","$e698a72e93240346$var$getState","undefined","ref","onKeyDown","$1bpvS$composeEventHandlers","event","key","preventDefault","onClick","prevChecked","isPropagationStopped","stopPropagation","$e698a72e93240346$var$BubbleInput","control","bubbles","style","transform","$e698a72e93240346$var$INDICATOR_NAME","$e698a72e93240346$export$59aad738f51d1c05","forceMount","indicatorProps","context","$1bpvS$Presence","present","pointerEvents","inputProps","$8LvvK$useRef","previous","$8LvvK$useMemo","$1bpvS$usePrevious","controlSize","$1bpvS$useSize","input","inputProto","window","HTMLInputElement","prototype","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","tabIndex","position","opacity","margin","$e698a72e93240346$export$be92b6f5f03c0fe9","$e698a72e93240346$export$adb584737d712b70","Checkbox","React","_ref","className","_jsx","CheckboxPrimitive","cn","children","CheckIcon","displayName","$89eedd556c436f6a$var$DEFAULT_ORIENTATION","$89eedd556c436f6a$var$ORIENTATIONS","$89eedd556c436f6a$export$1ff3c3f08ae963c0","$5WXm8$forwardRef","decorative","orientation","orientationProp","domProps","$89eedd556c436f6a$var$isValidOrientation","semanticProps","$5WXm8$createElement","$5WXm8$Primitive","$5WXm8$babelruntimehelpersesmextends","includes","propTypes","propName","componentName","propValue","strVal","String","Error","concat","$89eedd556c436f6a$var$getInvalidOrientationError","$89eedd556c436f6a$export$be92b6f5f03c0fe9","Separator","SeparatorPrimitive","my_custom_param","URL","location","href","searchParams","get","Login","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","providers","headerNode","infoNode","registrationAllowed","_jsxs","id","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","Label","htmlFor","Input","defaultValue","username","autoFocus","autoComplete","clsx","rememberMe","selectedCredential","Button","resetPasswordAllowed","loginResetCredentialsUrl","map","p","open","loginUrl","alias","buttonVariants","variant","GitHubLogoIcon","providerId","console","log"],"sourceRoot":""}