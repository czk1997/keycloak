{"version":3,"file":"static/js/4152.3c91694c.chunk.js","mappings":"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","sources":["components/ui/input.tsx","../node_modules/@radix-ui/react-checkbox/dist/packages/react/checkbox/src/Checkbox.tsx","../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx","components/ui/checkbox.tsx","../node_modules/@radix-ui/react-label/dist/packages/react/label/src/Label.tsx","components/ui/label.tsx","login/pages/Login.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {cn} from \"lib/utils\";\n\n\n\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = button?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [button, setChecked]);\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={isIndeterminate(checked) ? false : checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps };\n","import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n","import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"@radix-ui/react-icons\"\n\nimport { cn } from \"lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <CheckIcon className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = Radix.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","import {useState, type FormEventHandler} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\nimport {Button} from \"../../components/ui/button\";\nimport {Checkbox} from \"../../components/ui/checkbox\";\nimport {cn} from \"../../lib/utils\";\nimport {Label} from \"../../components/ui/label\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {social, realm, url, usernameHidden, login, auth, registrationDisabled} = kcContext;\n\n    const {msg, msgStr} = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"lg:p-8\">\n                <div className={`mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]`}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\"\n                              className={\"grid gap-6\"}>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                                <Label htmlFor=\"autoCompleteHelper\"> {msg(label)}</Label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n\n                                <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                    <Label htmlFor=\"password\">{msg(\"password\")}</Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Checkbox id=\"terms2\" checked={login.rememberMe === \"on\"}/>\n                                            <label\n                                                htmlFor=\"terms2\"\n                                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                            >\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\">\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <Button\n                                    tabIndex={4}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    disabled={isLoginButtonDisabled}\n                                >\n                                    {msgStr(\"doLogIn\")}\n                                </Button>\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`}\n                                       className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["Input","React","_ref","ref","className","type","props","_jsx","cn","displayName","$e698a72e93240346$var$CHECKBOX_NAME","$e698a72e93240346$var$createCheckboxContext","$e698a72e93240346$export$b566c4ff5488ea01","$1bpvS$createContextScope","$e698a72e93240346$var$CheckboxProvider","$e698a72e93240346$var$useCheckboxContext","$e698a72e93240346$export$48513f6b9f8ce62d","$1bpvS$forwardRef","forwardedRef","__scopeCheckbox","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","checkboxProps","button","setButton","$1bpvS$useState","composedRefs","$1bpvS$useComposedRefs","node","hasConsumerStoppedPropagationRef","$1bpvS$useRef","isFormControl","Boolean","closest","setChecked","$1bpvS$useControllableState","prop","defaultProp","onChange","initialCheckedStateRef","$1bpvS$useEffect","form","reset","current","addEventListener","removeEventListener","$1bpvS$createElement","scope","state","$1bpvS$Primitive","$1bpvS$babelruntimehelpersesmextends","role","$e698a72e93240346$var$isIndeterminate","$e698a72e93240346$var$getState","undefined","onKeyDown","$1bpvS$composeEventHandlers","event","key","preventDefault","onClick","prevChecked","isPropagationStopped","stopPropagation","$e698a72e93240346$var$BubbleInput","control","bubbles","style","transform","$e698a72e93240346$var$INDICATOR_NAME","$e698a72e93240346$export$59aad738f51d1c05","forceMount","indicatorProps","context","$1bpvS$Presence","present","pointerEvents","inputProps","$8LvvK$useRef","previous","$8LvvK$useMemo","$1bpvS$usePrevious","controlSize","$1bpvS$useSize","input","inputProto","window","HTMLInputElement","prototype","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","tabIndex","position","opacity","margin","$e698a72e93240346$export$be92b6f5f03c0fe9","$e698a72e93240346$export$adb584737d712b70","Checkbox","CheckboxPrimitive","children","CheckIcon","$b73a6c6685e72184$export$b04be29aa201d4f5","$7V4JZ$forwardRef","$7V4JZ$createElement","$7V4JZ$Primitive","$7V4JZ$babelruntimehelpersesmextends","onMouseDown","_props$onMouseDown","defaultPrevented","detail","$b73a6c6685e72184$export$be92b6f5f03c0fe9","labelVariants","cva","Label","LabelPrimitive","my_custom_param","URL","location","href","searchParams","get","Login","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","providers","headerNode","infoNode","registrationAllowed","id","_jsxs","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","defaultValue","username","autoFocus","autoComplete","clsx","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","Button","length","map","p","loginUrl","concat","alias","providerId","console","log"],"sourceRoot":""}