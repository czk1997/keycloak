{"version":3,"file":"static/js/575.852a7409.chunk.js","mappings":"0MAQA,MAAMA,EAAiB,IAAIC,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,mBAMvD,SAASC,EAAMC,GAC1B,MAAM,UAAEC,EAAS,KAAEC,EAAI,gBAAEC,EAAe,SAAEC,EAAQ,QAAEC,GAAYL,GAE1D,aAAEM,IAAiBC,EAAAA,EAAAA,GAAgB,CACrCJ,kBACAE,aAGE,OAAEG,EAAM,MAAEC,EAAK,IAAEC,EAAG,eAAEC,EAAc,MAAEC,EAAK,KAAEC,EAAI,qBAAEC,GAAyBb,GAE5E,IAAEc,EAAG,OAAEC,GAAWd,GAEjBe,EAAuBC,IAA4BC,EAAAA,EAAAA,WAAS,GAE7DC,GAAWC,EAAAA,EAAAA,IAAoDC,IAAM,IAADC,EACtED,EAAEE,iBAEFN,GAAyB,GAEzB,MAAMO,EAAcH,EAAEI,OAI0B,QAAhDH,EAAAE,EAAYE,cAAc,8BAAsB,IAAAJ,GAAhDA,EAAkDK,aAAa,OAAQ,YAEvEH,EAAYI,QAAQ,IAGxB,OACIC,EAAAA,EAAAA,KAAC1B,EAAQ,CACCH,YAAWC,OAAMC,kBAAiBE,UACxC0B,YAAavB,EAAOuB,YACpBC,YAAavB,EAAMwB,eAAiCC,IAArB1B,EAAO2B,UACtCC,WAAYrB,EAAI,WAChBsB,SACI5B,EAAMwB,UACNxB,EAAM6B,sBACLxB,IACGgB,EAAAA,EAAAA,KAAA,OAAKS,GAAG,kBAAiBC,UACrBC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACKzB,EAAI,cACLe,EAAAA,EAAAA,KAAA,KAAGY,SAAU,EAAG9C,KAAMc,EAAIiC,gBAAgBH,SACrCzB,EAAI,qBAKxByB,UAEDC,EAAAA,EAAAA,MAAA,OAAKF,GAAG,UAAUK,WAAWC,EAAAA,EAAAA,GAAKpC,EAAMwB,eAAiCC,IAArB1B,EAAO2B,WAA2B7B,EAAa,0BAA0BkC,SAAA,EACzHV,EAAAA,EAAAA,KAAA,OACIS,GAAG,kBACHK,WAAWC,EAAAA,EAAAA,GACPpC,EAAMwB,UACNzB,EAAO2B,WAAa,CAAC7B,EAAa,mCAAoCA,EAAa,8BACrFkC,SAED/B,EAAMwB,WACHQ,EAAAA,EAAAA,MAAA,QAAMF,GAAG,gBAAgBnB,SAAUA,EAAU0B,OAAQpC,EAAIqC,YAAaC,OAAO,OAAMR,SAAA,EAC/EV,EAAAA,EAAAA,KAAA,OAAKc,UAAWtC,EAAa,oBAAoBkC,UAC3C7B,GACE,CAACsC,IACG,MAAMC,EAASzC,EAAM0C,sBAEf1C,EAAM2C,4BACF,QACA,kBAHJ,WAKAC,EAA6C,oBAAVH,EAA8B,WAAaA,EAEpF,OACIT,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAd,SAAA,EACIV,EAAAA,EAAAA,KAAA,SAAOyB,QAASF,EAAoBT,UAAW,GAAGJ,SAC7CzB,EAAImC,MAETpB,EAAAA,EAAAA,KAAA,KAAGc,UAAW,gBAAgBJ,SAAC,UAG/BV,EAAAA,EAAAA,KAAA,SACIY,SAAU,EACVH,GAAIc,EACJT,UAAWtC,EAAa,gBAIxBkD,KAAMH,EACNI,aAA4B,QAAhBR,EAAErC,EAAM8C,gBAAQ,IAAAT,EAAAA,EAAI,GAChCU,KAAK,OACLC,WAAW,EACXC,aAAa,UAI5B,EAhCD,MAkCRpB,EAAAA,EAAAA,MAAA,OAAKG,UAAWtC,EAAa,oBAAoBkC,SAAA,EAC7CV,EAAAA,EAAAA,KAAA,SAAOyB,QAAQ,WAAWX,UAAWtC,EAAa,gBAAgBkC,SAC7DzB,EAAI,eAETe,EAAAA,EAAAA,KAAA,SACIY,SAAU,EACVH,GAAG,WACHK,UAAWtC,EAAa,gBACxBkD,KAAK,WACLG,KAAK,WACLE,aAAa,YAGrBpB,EAAAA,EAAAA,MAAA,OAAKG,WAAWC,EAAAA,EAAAA,GAAKvC,EAAa,oBAAqBA,EAAa,uBAAuBkC,SAAA,EACvFV,EAAAA,EAAAA,KAAA,OAAKS,GAAG,kBAAiBC,SACpB/B,EAAMqD,aAAenD,IAClBmB,EAAAA,EAAAA,KAAA,OAAKc,UAAU,WAAUJ,UACrBC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACIV,EAAAA,EAAAA,KAAA,SACIY,SAAU,EACVH,GAAG,aACHiB,KAAK,aACLG,KAAK,cACqB,OAArB/C,EAAMkD,WACL,CACE,SAAW,GAEb,CAAC,IAEV/C,EAAI,sBAKrBe,EAAAA,EAAAA,KAAA,OAAKc,UAAWtC,EAAa,6BAA6BkC,SACrD/B,EAAMsD,uBACHjC,EAAAA,EAAAA,KAAA,QAAAU,UACIV,EAAAA,EAAAA,KAAA,KAAGY,SAAU,EAAG9C,KAAMc,EAAIsD,yBAAyBxB,SAC9CzB,EAAI,8BAMzB0B,EAAAA,EAAAA,MAAA,OAAKF,GAAG,kBAAkBK,UAAWtC,EAAa,oBAAoBkC,SAAA,EAClEV,EAAAA,EAAAA,KAAA,SACI6B,KAAK,SACLpB,GAAG,kBACHiB,KAAK,uBAC6BtB,KAAzB,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAMoD,oBACL,CACE,MAASpD,EAAKoD,oBAEhB,CAAC,KAEXnC,EAAAA,EAAAA,KAAA,SACIY,SAAU,EACVE,WAAWC,EAAAA,EAAAA,GACPvC,EAAa,iBACbA,EAAa,wBACbA,EAAa,sBACbA,EAAa,uBAEjBkD,KAAK,QACLjB,GAAG,WACHoB,KAAK,SACLO,MAAOlD,EAAO,WACdmD,SAAUlD,YAM7BR,EAAMwB,eAAiCC,IAArB1B,EAAO2B,YACtBL,EAAAA,EAAAA,KAAA,OACIS,GAAG,sBACHK,WAAWC,EAAAA,EAAAA,GAAKvC,EAAa,mCAAoCA,EAAa,6BAA6BkC,UAE3GV,EAAAA,EAAAA,KAAA,MACIc,WAAWC,EAAAA,EAAAA,GACPvC,EAAa,gCACbE,EAAO2B,UAAUiC,OAAS,GAAK9D,EAAa,uCAC9CkC,SAEDhC,EAAO2B,UAAUkC,KAAIC,IAClBxC,EAAAA,EAAAA,KAAA,MAAuBc,UAAWtC,EAAa,oCAAoCkC,UAC/EV,EAAAA,EAAAA,KAAA,KAAGlC,KAAM0E,EAAEC,SAAUhC,GAAE,UAAAiC,OAAYF,EAAEG,OAAS7B,WAAWC,EAAAA,EAAAA,GAAK,SAAUyB,EAAEI,YAAYlC,UAClFV,EAAAA,EAAAA,KAAA,QAAAU,SAAO8B,EAAEK,iBAFRL,EAAEI,sBAY3C,CApMwB,OAApBlF,GACAoF,QAAQC,IAAI,mBAAoBrF,E","sources":["login/pages/Login.tsx"],"sourcesContent":["import { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nconst my_custom_param= new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={\"\"}>\n                                                    {msg(label)}\n                                                </label>\n                                                <p className={\"text-blue-600\"}>\n                                                    dfaa\n                                                </p>\n                                                <input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe === \"on\"\n                                                        ? {\n                                                            \"checked\": true\n                                                        }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["my_custom_param","URL","window","location","href","searchParams","get","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","_jsx","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","id","children","_jsxs","tabIndex","registrationUrl","className","clsx","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","_Fragment","htmlFor","name","defaultValue","username","type","autoFocus","autoComplete","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","concat","alias","providerId","displayName","console","log"],"sourceRoot":""}