{"version":3,"file":"static/js/5175.9a332f33.chunk.js","mappings":"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","sources":["../node_modules/use-breakpoint/dist/esm/createMediaQueries.js","../node_modules/use-breakpoint/dist/esm/useBreakpoint.js","login/pages/Login.tsx"],"sourcesContent":["/**\n * Create media query objects\n * @param breakpoints the list of configured breakpoint names and their pixel values\n */\nconst createMediaQueries = (breakpoints) => {\n    const sortedBreakpoints = Object.keys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);\n    return sortedBreakpoints.map((breakpoint, index) => {\n        let query = '';\n        const minWidth = breakpoints[breakpoint];\n        const nextBreakpoint = sortedBreakpoints[index - 1];\n        const maxWidth = nextBreakpoint ? breakpoints[nextBreakpoint] : null;\n        if (minWidth >= 0) {\n            query = `(min-width: ${minWidth}px)`;\n        }\n        if (maxWidth !== null) {\n            if (query) {\n                query += ' and ';\n            }\n            query += `(max-width: ${maxWidth - 1}px)`;\n        }\n        const mediaQuery = {\n            breakpoint,\n            maxWidth: maxWidth ? maxWidth - 1 : null,\n            minWidth,\n            query,\n        };\n        return mediaQuery;\n    });\n};\nexport default createMediaQueries;\n","import { useMemo, useCallback, useDebugValue, useSyncExternalStore, } from 'react';\nimport createMediaQueries from './createMediaQueries.js';\nconst EMPTY_BREAKPOINT = {\n    breakpoint: null,\n    minWidth: null,\n    maxWidth: null,\n    query: null,\n};\n/**\n * A React hook to use the current responsive breakpoint.\n * Will listen to changes using the window.matchMedia API.\n * @param {*} config the list of configured breakpoint names and their pixel values\n * @param {*} [defaultBreakpoint] the optional default breakpoint\n *\n * @example\n * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }\n * ...\n * const result = useBreakpoint(breakpoints)\n * // { breakpoint: string; minWidth: number; maxWidth: number | null } | { breakpoint: undefined; minWidth: undefined; maxWidth: undefined }\n *\n * @example <caption>With default value</caption>\n * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }\n * ...\n * const result = useBreakpoint(breakpoints, 'mobile')\n * // breakpoint: { breakpoint: string; minWidth: number; maxWidth: number | null }\n */\nconst useBreakpoint = (config, defaultBreakpoint) => {\n    /** Memoize list of calculated media queries from config */\n    const mediaQueries = useMemo(() => createMediaQueries(config), [config]);\n    const subscribe = useCallback((callback) => {\n        const unsubscribers = [];\n        mediaQueries.forEach(({ query, ...breakpoint }) => {\n            const list = window.matchMedia(query);\n            const supportsNewEventListeners = 'addEventListener' in list && 'removeEventListener' in list;\n            if (supportsNewEventListeners) {\n                list.addEventListener('change', callback);\n            }\n            else {\n                ;\n                list.addListener(callback);\n            }\n            /** Map the unsubscribers array to a list of unsubscriber methods */\n            unsubscribers.push(supportsNewEventListeners\n                ? () => list.removeEventListener('change', callback)\n                : () => list.removeListener(callback));\n        });\n        /** Return a function that when called, will call all unsubscribers */\n        return () => unsubscribers.forEach((unsubscriber) => unsubscriber());\n    }, [mediaQueries]);\n    const getSnapshot = useCallback(() => {\n        const match = mediaQueries.find((mediaQuery) => {\n            /**\n             * If we're in the browser and there's no default value,\n             * try to match actual breakpoint.\n             */\n            if (window.matchMedia(mediaQuery.query).matches) {\n                return true;\n            }\n            /** Otherwise, try to match default value */\n            if (mediaQuery.breakpoint === defaultBreakpoint) {\n                return true;\n            }\n        });\n        return match ?? EMPTY_BREAKPOINT;\n    }, [defaultBreakpoint, mediaQueries]);\n    const getServerSnapshot = useCallback(() => {\n        const match = mediaQueries.find((mediaQuery) => defaultBreakpoint === mediaQuery.breakpoint);\n        return match ?? EMPTY_BREAKPOINT;\n    }, [defaultBreakpoint, mediaQueries]);\n    const currentBreakpoint = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    /** Print a nice debug value for React Devtools */\n    useDebugValue(currentBreakpoint, (c) => typeof c.breakpoint === 'string'\n        ? `${c.breakpoint} (${c.minWidth} ≤ x${c.maxWidth ? ` < ${c.maxWidth + 1}` : ''})`\n        : '');\n    return currentBreakpoint;\n};\nexport default useBreakpoint;\n","import {useState, type FormEventHandler, useEffect} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\nimport {Button, buttonVariants} from \"../../components/ui/button\";\nimport {Checkbox} from \"../../components/ui/checkbox\";\nimport {BREAKPOINTS, cn} from \"../../lib/utils\";\nimport {Label} from \"../../components/ui/label\";\nimport {Separator} from \"../../components/ui/separator\";\nimport {GitHubLogoIcon} from '@radix-ui/react-icons'\nimport {\n    IconBrandBitbucket,\n    IconBrandFacebook, IconBrandFacebookFilled, IconBrandGithub, IconBrandGitlab,\n    IconBrandGoogle, IconBrandInstagram, IconBrandLinkedin, IconBrandOpenSource, IconBrandPaypal,\n    IconBrandStackoverflow,\n    IconBrandTwitter,\n    IconBrandWindows,\n    IconWindow\n} from \"@tabler/icons-react\";\nimport {useTitle} from \"react-use\";\nimport useBreakpoint from \"use-breakpoint\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\nconst prividerIdIconMap = {\n    \"microsoft\": <IconBrandWindows/>,\n    \"google\": <IconBrandGoogle/>,\n    \"facebook\": <IconBrandFacebookFilled/>,\n    \"twitter\": <IconBrandTwitter/>,\n    \"stackoverflow\": <IconBrandStackoverflow/>,\n    \"gitlab\": <IconBrandGitlab/>,\n    \"paypal\": <IconBrandPaypal/>,\n    \"instagram\": <IconBrandInstagram/>,\n    \"linkedin\": <IconBrandLinkedin/>,\n    \"github\": <IconBrandGithub/>,\n    \"bitbucket\": <IconBrandBitbucket/>,\n    \"openshift\": <IconBrandOpenSource/>\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n    const {breakpoint} = useBreakpoint(\n        BREAKPOINTS\n    )\n    const {\n        social,\n        realm,\n        url,\n        usernameHidden,\n        login,\n        auth,\n        registrationDisabled,\n        messagesPerField,\n        recaptchaRequired,\n        recaptchaSiteKey\n    } = kcContext;\n\n    const {msg, msgStr} = i18n;\n    useTitle(i18n.msgStr(\"loginTitle\", kcContext.realm.displayName))\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n    useEffect(() => {\n        if (recaptchaRequired && recaptchaSiteKey) {\n            const recaptchaScriptUrl = kcContext.scripts?.[0] || \"https://www.google.com/recaptcha/api.js\"; // fallback for Storybook\n\n            let script = document.querySelector(`script[src=\"${recaptchaScriptUrl}\"]`) as HTMLScriptElement | null;\n\n            const renderRecaptcha = () => {\n                if (window.grecaptcha && document.getElementById(\"recaptcha-container\")) {\n                    try {\n                        window.grecaptcha.render(\"#recaptcha-container\", {\n                            sitekey: recaptchaSiteKey\n                            // other reCAPTCHA options as needed\n                        });\n                    } catch (e) {\n\n                    }\n\n                }\n\n            };\n\n            if (!script) {\n                script = document.createElement(\"script\");\n                script.src = recaptchaScriptUrl;\n                script.async = true;\n                document.head.appendChild(script);\n\n                script.onload = () => {\n                    setTimeout(renderRecaptcha, 1000);\n                };\n            } else {\n                setTimeout(renderRecaptcha, 1000);\n            }\n\n            return () => {\n                if (document.body.contains(script)) {\n                    document.body.removeChild(script!);\n                }\n            };\n        }\n    }, [recaptchaRequired, recaptchaSiteKey, kcContext.scripts]);\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\" className={\"justify-center items-center text-center mb-3 w-full\"}>\n                        <Separator className={\"mb-1 mt-1\"}/>\n                        <span className={\"text-slate-500 text-sm\"}>\n                            {msg(\"noAccount\")} {' '}\n                            <a tabIndex={6} href={url.registrationUrl} className={\"text-slate-950\"}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"flex flex-col md:flex-row gap-4 w-full\">\n                <div className={`mx-auto flex w-full flex-col justify-center`}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\"\n                              className={\"flex flex-col gap-3 items-center w-full md:min-w-[350px]\"}>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                                <Label htmlFor=\"autoCompleteHelper\"> {msg(label)}</Label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                                {messagesPerField.get(\"username\") && <div\n                                                    className={\"text-xs text-red-500\"}>{messagesPerField.get(\"username\")}</div>}\n                                            </div>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                    <Label htmlFor=\"password\">{msg(\"password\")}</Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                    {realm.resetPasswordAllowed && (\n                                        <span\n                                            className={\"text-sm mt-1 text-slate-500 w-full text-center items-start flex justify-start\"}>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n\n                            </div>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Checkbox id=\"terms2\" defaultChecked={login.rememberMe === \"on\"}/>\n                                            <label\n                                                htmlFor=\"terms2\"\n                                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                            >\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n\n                                    )}\n                                </div>\n\n                            </div>\n\n                            <input\n                                type=\"hidden\"\n                                id=\"id-hidden-input\"\n                                name=\"credentialId\"\n                                {...(auth?.selectedCredential !== undefined\n                                    ? {\n                                        \"value\": auth.selectedCredential\n                                    }\n                                    : {})}\n                            />\n                            {recaptchaRequired && (\n                                <div className=\"form-group\">\n                                    <div className={getClassName(\"kcInputWrapperClass\")}>\n                                        <div className=\"g-recaptcha w-full first:w-full\" data-size=\"normal\"\n                                             id=\"recaptcha-container\" data-sitekey={recaptchaSiteKey}/>\n                                    </div>\n                                </div>\n                            )}\n                            <Button\n                                tabIndex={4}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                className={\"min-w-[200px]\"}\n                                disabled={isLoginButtonDisabled}\n                            >\n                                {msgStr(\"doLogIn\")}\n                            </Button>\n                        </form>\n                    )}\n\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={'flex gap-4 w-auto flex-col md:flex-row items-center'}\n                    >\n                        {[\"xl\", \"2xl\", \"lg\",\"md\"].includes(breakpoint || \"sm\") ? <Separator orientation=\"vertical\"/> :\n                            <Separator/>}\n                        <div\n                            className={\"grid flex-col flex-wrap grid-cols-2 gap-2 w-[320px]\"}\n                        >\n                            {social.providers.map(p => (\n                                <Button onClick={() => window.location.href = p.loginUrl} id={`zocial-${p.alias}`}\n                                        key={p.providerId}\n                                        className={`${buttonVariants({variant: \"secondary\"})} w-[160px] flex justify-start gap-2`}>\n                                    {/*@ts-ignore*/}\n                                    {prividerIdIconMap[p.providerId]}\n                                    <span>{p.displayName}</span>\n                                </Button>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["breakpoints","sortedBreakpoints","Object","keys","sort","a","b","map","breakpoint","index","query","minWidth","nextBreakpoint","maxWidth","concat","EMPTY_BREAKPOINT","useBreakpoint","config","defaultBreakpoint","mediaQueries","useMemo","createMediaQueries","subscribe","useCallback","callback","unsubscribers","forEach","_ref","list","window","matchMedia","supportsNewEventListeners","addEventListener","addListener","push","removeEventListener","removeListener","unsubscriber","getSnapshot","match","find","mediaQuery","matches","getServerSnapshot","currentBreakpoint","useSyncExternalStore","useDebugValue","c","my_custom_param","URL","location","href","searchParams","get","console","log","prividerIdIconMap","_jsx","IconBrandWindows","IconBrandGoogle","IconBrandFacebookFilled","IconBrandTwitter","IconBrandStackoverflow","IconBrandGitlab","IconBrandPaypal","IconBrandInstagram","IconBrandLinkedin","IconBrandGithub","IconBrandBitbucket","IconBrandOpenSource","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","BREAKPOINTS","social","realm","url","usernameHidden","login","auth","registrationDisabled","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useTitle","displayName","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","useEffect","_kcContext$scripts","recaptchaScriptUrl","scripts","script","document","renderRecaptcha","grecaptcha","getElementById","render","sitekey","setTimeout","createElement","src","async","head","appendChild","onload","body","contains","removeChild","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","_jsxs","id","className","children","Separator","tabIndex","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","Label","htmlFor","Input","name","defaultValue","username","type","autoFocus","autoComplete","resetPasswordAllowed","loginResetCredentialsUrl","rememberMe","Checkbox","defaultChecked","selectedCredential","Button","disabled","includes","orientation","p","onClick","loginUrl","alias","buttonVariants","variant","providerId"],"sourceRoot":""}