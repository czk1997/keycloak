{"version":3,"file":"static/js/8568.b36512f5.chunk.js","mappings":"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","sources":["components/ui/input.tsx","login/pages/Login.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {cn} from \"lib/utils\";\n\n\n\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","import {useState, type FormEventHandler} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {social, realm, url, usernameHidden, login, auth, registrationDisabled} = kcContext;\n\n    const {msg, msgStr} = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"lg:p-8\">\n                <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\"\n                     id=\"kc-form-wrapper\"\n                     // className={clsx(\n                     //     realm.password &&\n                     //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                     // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={\"\"}>\n                                                    {msg(label)}\n                                                </label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <Input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe === \"on\"\n                                                        ? {\n                                                            \"checked\": true\n                                                        }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`}\n                                       className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["Input","React","_ref","ref","className","type","props","_jsx","cn","displayName","my_custom_param","URL","window","location","href","searchParams","get","Login","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","id","children","_jsxs","tabIndex","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","_Fragment","htmlFor","name","defaultValue","username","autoFocus","autoComplete","clsx","rememberMe","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","concat","alias","providerId","console","log"],"sourceRoot":""}