{"version":3,"file":"static/js/535.f10f8696.chunk.js","mappings":"iMAgBO,SAASA,EAAsBC,GAClC,MAAM,UAAEC,EAAS,+BAAEC,EAA8B,KAAEC,EAAI,aAAEC,EAAY,YAAEC,EAAW,WAAEC,GAAeN,GAE7F,YAAEO,EAAW,IAAEC,GAAQL,GAGzBM,qBAAqB,0BAAEC,EAAyB,kBAAEC,GAAmB,uBACrEC,EAAsB,uBACtBC,IACAC,EAAAA,EAAAA,GAAkB,CAClBb,YACAE,UAGJY,EAAAA,EAAAA,YAAU,KACNb,EAA+BS,EAAkB,GAClD,CAACA,IAEJ,IAAIK,EAAe,GAEnB,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKN,EAAuBO,KAAI,CAACC,EAAWC,KAAO,IAADC,EAC1C,MAAM,MAAEC,EAAQ,GAAE,mBAAEC,EAAqB,GAAE,wBAAEC,EAA0B,IAAOL,GAExE,MAAEM,EAAK,kBAAEC,GAAsBlB,EAA0BW,EAAUQ,MAEnEC,GAAqBC,EAAAA,EAAAA,GACvB3B,EAAa,oBACgB,IAA7BwB,EAAkBI,QAAgB5B,EAAa,0BAGnD,OACI6B,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAf,SAAA,CACJK,IAAUR,GAA2C,MAA1BA,EAAeQ,KACvCS,EAAAA,EAAAA,MAAA,OAAKE,UAAWL,EAAmBX,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,OAAKkB,UAAW/B,EAAa,yBAAyBe,UAClDF,EAAAA,EAAAA,KAAA,SAAOmB,GAAE,UAAAC,OAAYb,GAASW,UAAW/B,EAAa,qBAAqBe,SACtEZ,EAAYkB,IAAuBT,MAGf,KAA5BU,IACGT,EAAAA,EAAAA,KAAA,OAAKkB,UAAW/B,EAAa,uBAAuBe,UAChDF,EAAAA,EAAAA,KAAA,SAAOmB,GAAE,eAAAC,OAAiBb,GAASW,UAAW/B,EAAa,gBAAgBe,SACtEZ,EAAYmB,UAOhCrB,IAAeY,EAAAA,EAAAA,KAACZ,EAAW,CAACgB,UAAWA,KAExCY,EAAAA,EAAAA,MAAA,OAAKE,UAAWL,EAAmBX,SAAA,EAC/Bc,EAAAA,EAAAA,MAAA,OAAKE,UAAW/B,EAAa,uBAAuBe,SAAA,EAChDF,EAAAA,EAAAA,KAAA,SAAOqB,QAASjB,EAAUQ,KAAMM,UAAW/B,EAAa,gBAAgBe,SACnEZ,EAAiC,QAAtBgB,EAACF,EAAUkB,mBAAW,IAAAhB,EAAAA,EAAI,MAEzCF,EAAUmB,WAAYvB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAE,UAE7Bc,EAAAA,EAAAA,MAAA,OAAKE,UAAW/B,EAAa,uBAAuBe,SAAA,CAC/C,MACG,MAAM,QAAEsB,GAAYpB,EAAUqB,WAE9B,YAAgBC,IAAZF,GAEIxB,EAAAA,EAAAA,KAAA,UACImB,GAAIf,EAAUQ,KACdA,KAAMR,EAAUQ,KAChBe,SAAUC,GACNjC,EAAuB,CACnB,OAAU,eACV,KAAQS,EAAUQ,KAClB,SAAYgB,EAAMC,OAAOnB,QAGjCoB,OAAQA,IACJnC,EAAuB,CACnB,OAAU,aACV,KAAQS,EAAUQ,OAG1BF,MAAOA,EAAMR,UAEbc,EAAAA,EAAAA,MAAAf,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQU,MAAM,GAAGqB,UAAQ,EAACC,UAAQ,EAACC,QAAM,EAAA/B,SACpCX,EAAI,oBAERiC,EAAQA,QAAQrB,KAAI+B,IACjBlC,EAAAA,EAAAA,KAAA,UAAqBU,MAAOwB,EAAOhC,SAC9BgC,GADQA,WAU7BlC,EAAAA,EAAAA,KAAA,SACImC,KAAM,MACF,OAAQ/B,EAAUQ,MACd,IAAK,mBACL,IAAK,WACD,MAAO,WACX,QACI,MAAO,OAElB,EARK,GASNO,GAAIf,EAAUQ,KACdA,KAAMR,EAAUQ,KAChBF,MAAOA,EACPiB,SAAUC,GACNjC,EAAuB,CACnB,OAAU,eACV,KAAQS,EAAUQ,KAClB,SAAYgB,EAAMC,OAAOnB,QAGjCoB,OAAQA,IACJnC,EAAuB,CACnB,OAAU,aACV,KAAQS,EAAUQ,OAG1BM,UAAW/B,EAAa,gBACxB,eAA2C,IAA7BwB,EAAkBI,OAChCiB,SAAU5B,EAAUgC,SACpBC,aAAcjC,EAAUkC,cAGnC,EAtEA,GAuE6B,IAA7B3B,EAAkBI,QACf,MACI,MAAMwB,EAAK,eAAAnB,OAAkBhB,EAAUQ,MAEvC,OACII,EAAAA,EAAAA,MAAAf,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAA,IAAAkB,OAAYmB,EAAK,mCACjBvC,EAAAA,EAAAA,KAAA,QACImB,GAAIoB,EACJrB,UAAW/B,EAAa,4BACxBqD,MAAO,CACH,SAAyC,IAA7B7B,EAAkBI,OAAe,gBAAaW,GAE9D,YAAU,SAAQxB,SAEjBS,EAAkBR,KAAIsC,IAAA,IAAC,aAAEC,GAAcD,EAAA,OAAKC,CAAY,QAIxE,EAlBD,SAqBXrD,IAAcW,EAAAA,EAAAA,KAACX,EAAU,CAACe,UAAWA,MAzH3BC,EA0HJ,KAK/B,C,cCvKe,SAASsC,EAAoB5D,GACxC,MAAM,UAAEC,EAAS,KAAEE,EAAI,gBAAE0D,EAAe,SAAEC,EAAQ,QAAEC,GAAY/D,GAE1D,aAAEI,IAAiB4D,EAAAA,EAAAA,GAAgB,CACrCH,kBACAE,aAGE,IAAEE,EAAG,iBAAEC,EAAgB,kBAAEC,EAAiB,iBAAEC,GAAqBnE,GAEjE,IAAEO,EAAG,OAAE6D,GAAWlE,GAEjBQ,EAAmB2D,IAAwBC,EAAAA,EAAAA,WAAS,GAE3D,OACItD,EAAAA,EAAAA,KAAC6C,EAAQ,CACC7D,YAAWE,OAAM0D,kBAAiBE,UACxCS,eAAgBN,EAAiBO,OAAO,UACxCC,uBAAuB,EACvBC,WAAYnE,EAAI,iBAAiBW,UAEjCc,EAAAA,EAAAA,MAAA,QAAMG,GAAG,mBAAmBD,UAAW/B,EAAa,eAAgBwE,OAAQX,EAAIY,mBAAoBC,OAAO,OAAM3D,SAAA,EAC7GF,EAAAA,EAAAA,KAAClB,EAAqB,CAClBE,UAAWA,EACXC,+BAAgCoE,EAChCnE,KAAMA,EACNC,aAAcA,IAEjB+D,IACGlD,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,aAAYhB,UACvBF,EAAAA,EAAAA,KAAA,OAAKkB,UAAW/B,EAAa,uBAAuBe,UAChDF,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,cAAc,YAAU,UAAU,eAAciC,SAI3EnC,EAAAA,EAAAA,MAAA,OAAKE,UAAW/B,EAAa,oBAAqBqD,MAAO,CAAE,aAAgB,IAAKtC,SAAA,EAC5EF,EAAAA,EAAAA,KAAA,OAAKmB,GAAG,kBAAkBD,UAAW/B,EAAa,sBAAsBe,UACpEF,EAAAA,EAAAA,KAAA,OAAKkB,UAAW/B,EAAa,6BAA6Be,UACtDF,EAAAA,EAAAA,KAAA,QAAAE,UACIF,EAAAA,EAAAA,KAAA,KAAG8D,KAAMd,EAAIe,SAAS7D,SAAEX,EAAI,wBAKxCS,EAAAA,EAAAA,KAAA,OAAKmB,GAAG,kBAAkBD,UAAW/B,EAAa,sBAAsBe,UACpEF,EAAAA,EAAAA,KAAA,SACIkB,WAAWJ,EAAAA,EAAAA,GACP3B,EAAa,iBACbA,EAAa,wBACbA,EAAa,sBACbA,EAAa,uBAEjBgD,KAAK,SACLzB,MAAO0C,EAAO,cACdpB,UAAWtC,aAOvC,C,sFCtEO,MAAMsE,EACT,yJCaE,SAAUnE,EAAkBoE,GAa9B,MAAM,UAAEjF,EAAS,mBAAEkF,EAAqB,CAAC,EAAC,KAAEhF,GAAS+E,EAE/CrE,GAAyBuE,EAAAA,EAAAA,UAC3B,IACKnF,EAAUoF,iBAEL,MACI,MAAMxD,EAAO5B,EAAUqF,MAAMC,4BAA8B,QAAU,WAErE,OAAOtF,EAAUuF,QAAQC,WAAWC,QAChC,CAACC,EAAMC,IAAS,IACTD,KACCC,EAAK/D,OAASA,EACZ,CAAC+D,GACD,CACIA,GACAxD,EAAAA,EAAAA,IAAc,CACV,KAAQ,WACR,aAAeA,EAAAA,EAAAA,IAAwB,eACvC,UAAY,EACZ,UAAY,EACZ,WAAc+C,EACd,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,kBAEpB/C,EAAAA,EAAAA,IAAc,CACV,KAAQ,mBACR,aAAeA,EAAAA,EAAAA,IAAwB,sBACvC,UAAY,EACZ,UAAY,EACZ,WAAc,CACV,gBAAmB,CACf,KAAQ,WACR,sBAAsB,EACtB,SAAY,QACZ,iBAAiBA,EAAAA,EAAAA,IAAwB,sCAGjD,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,oBAIlC,GAEP,EAzCD,GADAnC,EAAUuF,QAAQC,YA2C5B,CAACxF,EAAWkF,KAGV,UAAEU,GAoGZ,SAAsBX,GASlB,MAAM,UAAEjF,EAAS,KAAEE,GAAS+E,GAEtB,iBACFhB,EACAsB,SAAS,WAAEC,IACXxF,GAEE,IAAEO,EAAG,OAAE6D,EAAM,YAAE9D,EAAW,eAAEuF,GAAmB3F,EAE/C0F,GAAYE,EAAAA,EAAAA,IAAkBb,I,MAChC,MAAM,KAAErD,EAAI,0BAAEmE,GAA8Bd,GAEtC,MAAEvD,GAAUqE,EAA0BnE,IAEpCF,MAAOsE,EAAY,WAAEvD,GAAe+C,EAAWS,MAAK7E,GAAaA,EAAUQ,OAASA,IAE5FsE,EAAO,CACH,IAAiB,OAAZF,QAAY,IAAZA,EAAAA,EAAgB,MAAQtE,EACzB,MAAMwE,EAGV,IAAIC,EAEJ,IACIA,EAAiBlC,EAAiBmC,YAAYxE,E,CAChD,MAAAyE,GACE,MAAMH,C,CAGV,IAAKC,EACD,MAAMD,EAGV,MAAMI,EAAkBrC,EAAiBsC,IAAI3E,GAE7C,MAAO,CACH,CACI,mBAAiBc,EACjB4D,kBACA,cAAgBtF,EAAAA,EAAAA,KAAA,QAAAE,SAAeoF,GAAJ,I,CAKvC,MAAME,EAIA,GAENC,EAAO,CACH,MAAMC,EAAgB,SAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,MAAQ,qBAAsBG,GAAmB,EAAK,IAAEC,EAAG,IAAEC,GAAQH,EAErE,IAAIC,GAA8B,KAAVlF,EAAxB,CAIA,QAAYgB,IAARmE,GAAqBnF,EAAMK,OAASgF,SAASF,GAAM,CACnD,MAAMG,EAAU,CAAC,gCAAiCH,GAElDL,EAAOS,KAAK,CACR,cAAgBjG,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,GAC7BN,iB,CAIR,QAAYhE,IAARoE,GAAqBpF,EAAMK,OAASgF,SAASD,GAAM,CACnD,MAAME,EAAU,CAAC,iCAAkCF,GAEnDN,EAAOS,KAAK,CACR,cAAgBjG,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,GAC7BN,iB,GAKZD,EAAO,CACH,MAAMC,EAAgB,kBAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,MAAQ,qBAAsBG,GAAmB,EAAOhF,KAAMsF,EAAS,SAAEC,EAAU,gBAAiBC,GAAoBT,EAExH,GAAIC,GAA8B,KAAVlF,EACpB,MAAM+E,EAGV,MAAQ/E,MAAO2F,GAAetB,EAA0BmB,GAWxD,GATgB,MACZ,OAAQC,GACJ,IAAK,YACD,OAAOE,IAAe3F,EAC1B,IAAK,QACD,OAAO2F,IAAe3F,EAEjC,EAPe,GAUZ,MAAM+E,EAGV,MAAMa,EAAS,CACI,OAAfF,QAAe,IAAfA,EAAAA,GACIjF,EAAAA,EAAAA,IACI,MACI,OAAQgF,GACJ,IAAK,QACD,MAAO,gBACX,IAAK,YACD,MAAO,oBAElB,EAPD,IASRD,EACAtF,EACAuF,GAGJX,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBZ,KAAegH,IAA/Bd,EAAOzE,QACtC,gBAAmB8D,KAAkByB,I,CAI7Cb,EAAO,CACH,MAAMC,EAAgB,UAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,MAAQ,qBAAsBG,GAAmB,EAAK,QAAEW,EAAS,gBAAiBH,GAAoBT,EAEtG,GAAIC,GAA8B,KAAVlF,EACpB,MAAM+E,EAGV,GAAI,IAAIe,OAAOD,GAASE,KAAK/F,GACzB,MAAM+E,EAGV,MAAMO,EAAU,CAAgB,OAAfI,QAAe,IAAfA,EAAAA,GAAmBjF,EAAAA,EAAAA,IAAe,sBAAuBoF,GAE1Ef,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBZ,KAAe0G,IAA/BR,EAAOzE,QACtC,gBAAmB8D,KAAkBmB,I,CAI7CP,EAAO,CACH,GAAgD,aAApB,QAAxBiB,EAAA,IAAIlB,GAAQmB,UAAU,UAAE,IAAAD,OAAA,EAAAA,EAAEhB,eAC1B,MAAMD,EAGV,MAAMC,EAAgB,QAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,MAAQ,qBAAsBG,GAAmB,GAAUD,EAE3D,GAAIC,GAA8B,KAAVlF,EACpB,MAAM+E,EAGV,GAAIzB,EAAYyC,KAAK/F,GACjB,MAAM+E,EAGV,MAAMO,EAAU,EAAC7E,EAAAA,EAAAA,IAAe,wBAEhCqE,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,I,CAIrCP,EAAO,CACH,MAAMC,EAAgB,UAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,MAAQ,qBAAsBG,GAAmB,EAAK,IAAEC,EAAG,IAAEC,GAAQH,EAErE,GAAIC,GAA8B,KAAVlF,EACpB,MAAM+E,EAGV,MAAMmB,EAAWb,SAASrF,GAE1B,GAAImG,MAAMD,GAAV,CACI,MAAMZ,EAAU,CAAC,mBAEjBR,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,I,MAMrC,QAAYtE,IAARmE,GAAqBe,EAAWb,SAASF,GAA7C,CACI,MAAMG,EAAU,CAAC,oCAAqCH,GAEtDL,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,I,MAMrC,QAAYtE,IAARoE,GAAqBc,EAAWb,SAASD,GAA7C,CACI,MAAME,EAAU,CAAC,sCAAuCF,GAExDN,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBX,KAAOyG,IAAvBR,EAAOzE,QACtC,gBAAmBqC,KAAU4C,I,OAOzCP,EAAO,CACH,MAAMC,EAAgB,UAEhBC,EAAYlE,EAAWiE,GAE7B,QAAkBhE,IAAdiE,EACA,MAAMF,EAGV,GAAc,KAAV/E,EACA,MAAM+E,EAGV,GAAIE,EAAUnE,QAAQsF,QAAQpG,IAAU,EACpC,MAAM+E,EAGV,MAAMO,EAAU,EAAC7E,EAAAA,EAAAA,IAAe,oBAEhCqE,EAAOS,KAAK,CACRP,gBACA,cAAgB1F,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAf,SAAsBZ,KAAe0G,IAA/BR,EAAOzE,QACtC,gBAAmB8D,KAAkBmB,I,CAM7C,OAAOR,CAAM,IAGjB,MAAO,CAAEZ,YACb,CA3Y0BmC,CAAa,CAC/B,UAAa,CACT,iBAAoB/H,EAAUiE,iBAC9B,QAAW,CACP,WAAcrD,IAGtBV,SAGE8H,GAAuB7C,EAAAA,EAAAA,UACzB,IACI8C,OAAOC,YACHtH,EACKO,KAAIC,IAAa,CACdA,YACA,OAAUwE,EAAU,CAChB,KAAQxE,EAAUQ,KAClB,0BAA6BqG,OAAOC,YAChCtH,EAAuBO,KAAIsC,IAAA,IAAC,KAAE7B,EAAI,MAAEF,GAAO+B,EAAA,MAAK,CAAC7B,EAAM,CAAE,MAAc,OAALF,QAAK,IAALA,EAAAA,EAAS,IAAK,WAI3FP,KAAIgH,IAA0B,IAAzB,UAAE/G,EAAS,OAAEoF,GAAQ2B,E,MAAK,OAC5B/G,EAAUQ,KACV,CACI,MAAwB,QAAf8F,EAAAtG,EAAUM,aAAK,IAAAgG,EAAAA,EAAI,GAC5BlB,SACA,gCAAqD,IAAlBA,EAAOzE,QAEjD,MAEb,CAACnB,KAKEwH,EAA6BzH,IAA0B0H,EAAAA,EAAAA,aAC1D,CACIC,EACArD,IAUgBgD,OAAAM,OAAAN,OAAAM,OAAC,CAAC,EACfD,GAAK,CACR,CAACrD,EAAOrD,MAAKqG,OAAAM,OAAAN,OAAAM,OAAA,GACND,EAAMrD,EAAOrD,OACb,MACC,OAAQqD,EAAON,QACX,IAAK,aACD,MAAO,CAAE,iCAAmC,GAChD,IAAK,eACD,MAAO,CACH,MAASM,EAAOuD,SAChB,OAAU5C,EAAU,CAChB,KAAQX,EAAOrD,KACf,0BAA2BqG,OAAAM,OAAAN,OAAAM,OAAA,GACpBD,GAAK,CACR,CAACrD,EAAOrD,MAAO,CAAE,MAASqD,EAAOuD,eAKxD,EAhBE,OAmBXR,GAmBJ,MAAO,CACHxH,qBAjBwB2E,EAAAA,EAAAA,UACxB,KAAM,CACF,0BAA6B8C,OAAOC,YAChCD,OAAOQ,QAAQL,GAA6BjH,KAAIuH,IAAA,IAAE9G,GAAM,MAAEF,EAAK,OAAE8E,EAAM,gCAAEmC,IAAkCD,EAAA,MAAK,CAC5G9G,EACA,CAAEF,QAAO,kBAAqBiH,EAAkCnC,EAAS,IAC5E,KAEL,kBAAqByB,OAAOQ,QAAQL,GAA6BQ,OAC7DC,IAAA,IAAEjH,GAAM,MAAEF,EAAK,OAAE8E,IAASqC,EAAA,OACJ,IAAlBrC,EAAOzE,SAA2B,KAAVL,IAAiBd,EAAuBqF,MAAK7E,GAAaA,EAAUQ,OAASA,IAAOW,SAAS,OAGjI,CAAC6F,EAA6BxH,IAK9BD,yBACAC,yBAER,C,YC/KKkI,MAAMC,UAAUH,QACjBE,MAAMC,UAAUH,MAAQ,SAAUI,EAAiBC,GAE/C,IAAIC,EAAGC,EAEP,GAAY,MAARC,KACA,MAAM,IAAIC,UAAU,+BAKxB,IAAIC,EAAIrB,OAAOmB,MAKXG,EAAMD,EAAEvH,SAAW,EAGvB,GAA0B,oBAAfiH,GAA4E,sBAA/Cf,OAAOc,UAAUS,SAASC,KAAKT,GACnE,MAAM,IAAIK,UAYd,IARIK,UAAU3H,OAAS,IACnBmH,EAAID,GAIRE,EAAI,EAGGA,EAAII,GAAK,CACZ,IAAII,EAQJ,GAAIR,KAAKG,EAcL,GAVAK,EAASL,EAAEH,KAMPD,EAAgBF,EAAWS,KAAKP,EAAGS,EAAQR,EAAGG,GAChCN,EAAWW,EAAQR,EAAGG,IAIpC,OAAO,EAGfH,G,CAEJ,OAAO,CACX,E","sources":["login/pages/shared/UserProfileFormFields.tsx","login/pages/RegisterUserProfile.tsx","../node_modules/keycloakify/src/tools/emailRegExp.ts","../node_modules/keycloakify/src/login/lib/useFormValidation.tsx","../node_modules/keycloakify/src/tools/Array.prototype.every.ts"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}","// ejected using 'npx eject-keycloak-page'\nimport { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFormSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"keycloakify/tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport type { Attribute, Validators } from \"keycloakify/login/kcContext/KcContext\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { emailRegexp } from \"keycloakify/tools/emailRegExp\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18n;\n}) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKey}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18n;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if ((defaultValue ?? \"\") !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKey>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKey>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n","if (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn: any, thisArg: any) {\n        \"use strict\";\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0.\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T) testResult = callbackfn.call(T, kValue, k, O);\n                else testResult = callbackfn(kValue, k, O);\n\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","_jsx","_Fragment","children","map","attribute","i","_attribute$displayNam","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","name","formGroupClassName","clsx","length","_jsxs","Fragment","className","id","concat","htmlFor","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","disabled","hidden","option","type","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","setIsFormSubmittable","useState","displayMessage","exists","displayRequiredFields","headerNode","action","registrationAction","method","href","loginUrl","emailRegexp","params","passwordValidators","useMemo","passwordRequired","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","getErrors","advancedMsgStr","useConstCallback","fieldValueByAttributeName","defaultValue","find","block","doesErrorExist","existsError","_b","errorMessageStr","get","errors","scope","validatorName","validator","ignoreEmptyValue","max","min","parseInt","msgArgs","push","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","RegExp","test","_a","reverse","intValue","isNaN","indexOf","useGetErrors","initialInternalState","Object","fromEntries","_ref2","formValidationInternalState","useReducer","state","assign","newValue","entries","_ref3","doDisplayPotentialErrorMessages","every","_ref4","Array","prototype","callbackfn","thisArg","T","k","this","TypeError","O","len","toString","call","arguments","kValue"],"sourceRoot":""}