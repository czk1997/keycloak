{"version":3,"file":"static/js/5033.c867c78a.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/tools/emailRegExp.ts","../node_modules/keycloakify/src/login/lib/useFormValidation.tsx","../node_modules/keycloakify/src/tools/Array.prototype.every.ts","../node_modules/@radix-ui/number/dist/packages/core/number/src/number.ts","../node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/VisuallyHidden.tsx","../node_modules/@radix-ui/react-select/dist/packages/react/select/src/Select.tsx"],"sourcesContent":["export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"keycloakify/tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport type { Attribute, Validators } from \"keycloakify/login/kcContext/KcContext\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { emailRegexp } from \"keycloakify/tools/emailRegExp\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18n;\n}) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKey}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18n;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if ((defaultValue ?? \"\") !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKey>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKey>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n","if (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn: any, thisArg: any) {\n        \"use strict\";\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0.\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T) testResult = callbackfn.call(T, kValue, k, O);\n                else testResult = callbackfn(kValue, k, O);\n\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n","function clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport { clamp };\n","import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * VisuallyHidden\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'VisuallyHidden';\n\ntype VisuallyHiddenElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface VisuallyHiddenProps extends PrimitiveSpanProps {}\n\nconst VisuallyHidden = React.forwardRef<VisuallyHiddenElement, VisuallyHiddenProps>(\n  (props, forwardedRef) => {\n    return (\n      <Primitive.span\n        {...props}\n        ref={forwardedRef}\n        style={{\n          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss\n          position: 'absolute',\n          border: 0,\n          width: 1,\n          height: 1,\n          padding: 0,\n          margin: -1,\n          overflow: 'hidden',\n          clip: 'rect(0, 0, 0, 0)',\n          whiteSpace: 'nowrap',\n          wordWrap: 'normal',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nVisuallyHidden.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = VisuallyHidden;\n\nexport {\n  VisuallyHidden,\n  //\n  Root,\n};\nexport type { VisuallyHiddenProps };\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value?: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? Boolean(trigger.closest('form')) : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <SelectProvider\n        required={required}\n        scope={__scopeSelect}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        valueNode={valueNode}\n        onValueNodeChange={setValueNode}\n        valueNodeHasChildren={valueNodeHasChildren}\n        onValueNodeHasChildrenChange={setValueNodeHasChildren}\n        contentId={useId()}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        dir={direction}\n        triggerPointerDownPosRef={triggerPointerDownPosRef}\n        disabled={disabled}\n      >\n        <Collection.Provider scope={__scopeSelect}>\n          <SelectNativeOptionsProvider\n            scope={props.__scopeSelect}\n            onNativeOptionAdd={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, [])}\n            onNativeOptionRemove={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, [])}\n          >\n            {children}\n          </SelectNativeOptionsProvider>\n        </Collection.Provider>\n\n        {isFormControl ? (\n          <BubbleSelect\n            key={nativeSelectKey}\n            aria-hidden\n            required={required}\n            tabIndex={-1}\n            name={name}\n            autoComplete={autoComplete}\n            value={value}\n            // enable form autofill\n            onChange={(event) => setValue(event.target.value)}\n            disabled={disabled}\n          >\n            {value === undefined ? <option value=\"\" /> : null}\n            {Array.from(nativeOptionsSet)}\n          </BubbleSelect>\n        ) : null}\n      </SelectProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = () => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n    };\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          type=\"button\"\n          role=\"combobox\"\n          aria-controls={context.contentId}\n          aria-expanded={context.open}\n          aria-required={context.required}\n          aria-autocomplete=\"none\"\n          dir={context.dir}\n          data-state={context.open ? 'open' : 'closed'}\n          disabled={isDisabled}\n          data-disabled={isDisabled ? '' : undefined}\n          data-placeholder={shouldShowPlaceholder(context.value) ? '' : undefined}\n          {...triggerProps}\n          ref={composedRefs}\n          // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n          onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n            // Whilst browsers generally have no issue focusing the trigger when clicking\n            // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n            // We force `focus` in this case. Note: this doesn't create any other side-effect\n            // because we are preventing default in `onPointerDown` so effectively\n            // this only runs for a label \"click\"\n            event.currentTarget.focus();\n          })}\n          onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n            // prevent implicit pointer capture\n            // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n            const target = event.target as HTMLElement;\n            if (target.hasPointerCapture(event.pointerId)) {\n              target.releasePointerCapture(event.pointerId);\n            }\n\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (event.button === 0 && event.ctrlKey === false) {\n              handleOpen();\n              context.triggerPointerDownPosRef.current = {\n                x: Math.round(event.pageX),\n                y: Math.round(event.pageY),\n              };\n              // prevent trigger from stealing focus from the active item after opening.\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n            const isTypingAhead = searchRef.current !== '';\n            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n            if (isTypingAhead && event.key === ' ') return;\n            if (OPEN_KEYS.includes(event.key)) {\n              handleOpen();\n              event.preventDefault();\n            }\n          })}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder = '', ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {shouldShowPlaceholder(context.value) ? <>{placeholder}</> : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    if (!context.open) {\n      const frag = fragment as Element | undefined;\n      return frag\n        ? ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            frag\n          )\n        : null;\n    }\n\n    return <SelectContentImpl {...props} ref={forwardedRef} />;\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContentImpl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  focusSelectedItem?: () => void;\n  selectedItemText?: SelectItemTextElement | null;\n  position?: SelectContentProps['position'];\n  isPositioned?: boolean;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\nconst CONTENT_IMPL_NAME = 'SelectContentImpl';\n\ntype SelectContentImplElement = SelectPopperPositionElement | SelectItemAlignedPositionElement;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\n\ntype SelectPopperPrivateProps = { onPlaced?: PopperContentProps['onPlaced'] };\n\ninterface SelectContentImplProps\n  extends Omit<SelectPopperPositionProps, keyof SelectPopperPrivateProps>,\n    Omit<SelectItemAlignedPositionProps, keyof SelectPopperPrivateProps> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n\n  position?: 'item-aligned' | 'popper';\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = 'item-aligned',\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    const SelectPosition = position === 'popper' ? SelectPopperPosition : SelectItemAlignedPosition;\n\n    // Silently ignore props that are not supported by `SelectItemAlignedPosition`\n    const popperContentProps =\n      SelectPosition === SelectPopperPosition\n        ? {\n            side,\n            sideOffset,\n            align,\n            alignOffset,\n            arrowPadding,\n            collisionBoundary,\n            collisionPadding,\n            sticky,\n            hideWhenDetached,\n            avoidCollisions,\n          }\n        : {};\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        focusSelectedItem={focusSelectedItem}\n        selectedItemText={selectedItemText}\n        position={position}\n        isPositioned={isPositioned}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <FocusScope\n            asChild\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={(event) => {\n              // we prevent open autofocus because we manually focus the selected item\n              event.preventDefault();\n            }}\n            onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n              context.trigger?.focus({ preventScroll: true });\n              event.preventDefault();\n            })}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              <SelectPosition\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                {...popperContentProps}\n                onPlaced={() => setIsPositioned(true)}\n                ref={composedRefs}\n                style={{\n                  // flex layout so we can place the scroll buttons properly\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // reset the outline by default as the content MAY get focused\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </DismissableLayer>\n          </FocusScope>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemAlignedPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_ALIGNED_POSITION_NAME = 'SelectItemAlignedPosition';\n\ntype SelectItemAlignedPositionElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemAlignedPositionProps extends PrimitiveDivProps, SelectPopperPrivateProps {}\n\nconst SelectItemAlignedPosition = React.forwardRef<\n  SelectItemAlignedPositionElement,\n  SelectItemAlignedPositionProps\n>((props: ScopedProps<SelectItemAlignedPositionProps>, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n  const [content, setContent] = React.useState<SelectItemAlignedPositionElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React.useCallback(() => {\n    if (\n      context.trigger &&\n      context.valueNode &&\n      contentWrapper &&\n      content &&\n      viewport &&\n      selectedItem &&\n      selectedItemText\n    ) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n\n      // -----------------------------------------------------------------------------------------\n      //  Horizontal positioning\n      // -----------------------------------------------------------------------------------------\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n\n      if (context.dir !== 'rtl') {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.left = clampedLeft + 'px';\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.right = clampedRight + 'px';\n      }\n\n      // -----------------------------------------------------------------------------------------\n      // Vertical positioning\n      // -----------------------------------------------------------------------------------------\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = 0 + 'px';\n        const viewportOffsetBottom =\n          content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight +\n            // viewport might have padding bottom, include it to avoid a scrollable viewport\n            (isLastItem ? viewportPaddingBottom : 0) +\n            viewportOffsetBottom +\n            contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + 'px';\n      } else {\n        const isFirstItem = selectedItem === items[0].ref.current;\n        contentWrapper.style.top = 0 + 'px';\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth +\n            viewport.offsetTop +\n            // viewport might have padding top, include it to avoid a scrollable viewport\n            (isFirstItem ? viewportPaddingTop : 0) +\n            selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + 'px';\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + 'px';\n      contentWrapper.style.maxHeight = availableHeight + 'px';\n      // -----------------------------------------------------------------------------------------\n\n      onPlaced?.();\n\n      // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n      // so we explicitly turn it on only after they've registered.\n      requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced,\n  ]);\n\n  useLayoutEffect(() => position(), [position]);\n\n  // copy z-index from content to wrapper\n  const [contentZIndex, setContentZIndex] = React.useState<string>();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n\n  // When the viewport becomes scrollable at the top, the scroll up button will mount.\n  // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n  // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n  // We wait for this to happen and then re-run the positining logic one more time to account for it.\n  const handleScrollButtonChange = React.useCallback(\n    (node: SelectScrollButtonImplElement | null) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem?.();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n\n  return (\n    <SelectViewportProvider\n      scope={__scopeSelect}\n      contentWrapper={contentWrapper}\n      shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n      onScrollButtonChange={handleScrollButtonChange}\n    >\n      <div\n        ref={setContentWrapper}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'fixed',\n          zIndex: contentZIndex,\n        }}\n      >\n        <Primitive.div\n          {...popperProps}\n          ref={composedRefs}\n          style={{\n            // When we get the height of the content, it includes borders. If we were to set\n            // the height without having `boxSizing: 'border-box'` it would be too big.\n            boxSizing: 'border-box',\n            // We need to ensure the content doesn't get taller than the wrapper\n            maxHeight: '100%',\n            ...popperProps.style,\n          }}\n        />\n      </div>\n    </SelectViewportProvider>\n  );\n});\n\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPopperPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\n\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps {}\n\nconst SelectPopperPosition = React.forwardRef<\n  SelectPopperPositionElement,\n  SelectPopperPositionProps\n>((props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = 'start',\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n\n  return (\n    <PopperPrimitive.Content\n      {...popperScope}\n      {...popperProps}\n      ref={forwardedRef}\n      align={align}\n      collisionPadding={collisionPadding}\n      style={{\n        // Ensure border-box for floating-ui calculations\n        boxSizing: 'border-box',\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\ntype SelectViewportContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n};\n\nconst [SelectViewportProvider, useSelectViewportContext] =\n  createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              overflow: 'auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    if (value === '') {\n      throw new Error(\n        'A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.'\n      );\n    }\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, handleSelect)}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'SelectArrow';\n\ntype SelectArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface SelectArrowProps extends PopperArrowProps {}\n\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\n  (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === 'popper' ? (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction shouldShowPlaceholder(value?: string) {\n  return value === '' || value === undefined;\n}\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nBubbleSelect.displayName = 'BubbleSelect';\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\nconst Arrow = SelectArrow;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n"],"names":["emailRegexp","useFormValidation","params","kcContext","passwordValidators","i18n","attributesWithPassword","useMemo","passwordRequired","name","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","id","getErrors","messagesPerField","msg","msgStr","advancedMsg","advancedMsgStr","useConstCallback","fieldValueByAttributeName","value","defaultValue","validators","find","attribute","block","doesErrorExist","existsError","_b","errorMessageStr","get","undefined","_jsx","children","errors","scope","validatorName","validator","ignoreEmptyValue","max","min","length","parseInt","msgArgs","push","Fragment","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","RegExp","test","_a","reverse","intValue","isNaN","options","indexOf","useGetErrors","initialInternalState","Object","fromEntries","map","_ref","_ref2","formValidationInternalState","formValidationDispatch","useReducer","state","assign","action","newValue","formValidationState","entries","_ref3","doDisplayPotentialErrorMessages","every","_ref4","required","Array","prototype","callbackfn","thisArg","T","k","this","TypeError","O","len","toString","call","arguments","kValue","$ae6933e535247d3d$export$7d15b64cf5a3a4c4","Math","$ea1ef594cf570d83$export$439d29a4e110a164","$kVwnw$forwardRef","props","forwardedRef","$kVwnw$createElement","$kVwnw$Primitive","$kVwnw$babelruntimehelpersesmextends","ref","style","position","border","width","height","padding","margin","overflow","clip","whiteSpace","wordWrap","$cc7e05a45900e73f$var$OPEN_KEYS","$cc7e05a45900e73f$var$SELECTION_KEYS","$cc7e05a45900e73f$var$SELECT_NAME","$cc7e05a45900e73f$var$Collection","$cc7e05a45900e73f$var$useCollection","$cc7e05a45900e73f$var$createCollectionScope","$01b9c$createCollection","$cc7e05a45900e73f$var$createSelectContext","$cc7e05a45900e73f$export$286727a75dc039bd","$01b9c$createContextScope","$01b9c$createPopperScope","$cc7e05a45900e73f$var$usePopperScope","$cc7e05a45900e73f$var$SelectProvider","$cc7e05a45900e73f$var$useSelectContext","$cc7e05a45900e73f$var$SelectNativeOptionsProvider","$cc7e05a45900e73f$var$useSelectNativeOptionsContext","$cc7e05a45900e73f$export$ef9b1a59e592288f","__scopeSelect","open","openProp","defaultOpen","onOpenChange","valueProp","onValueChange","dir","autoComplete","disabled","popperScope","trigger","setTrigger","$01b9c$useState","valueNode","setValueNode","valueNodeHasChildren","setValueNodeHasChildren","direction","$01b9c$useDirection","setOpen","$01b9c$useControllableState","prop","defaultProp","onChange","setValue","triggerPointerDownPosRef","$01b9c$useRef","isFormControl","Boolean","closest","nativeOptionsSet","setNativeOptionsSet","Set","nativeSelectKey","from","option","join","$01b9c$createElement","$01b9c$Root","onTriggerChange","onValueNodeChange","onValueNodeHasChildrenChange","contentId","$01b9c$useId","Provider","onNativeOptionAdd","$01b9c$useCallback","add","onNativeOptionRemove","optionsSet","delete","$cc7e05a45900e73f$var$BubbleSelect","key","tabIndex","event","target","$cc7e05a45900e73f$var$TRIGGER_NAME","$cc7e05a45900e73f$export$3ac1e88a1c0b9f1","$01b9c$forwardRef","triggerProps","context","isDisabled","composedRefs","$01b9c$useComposedRefs","getItems","searchRef","handleTypeaheadSearch","resetTypeahead","$cc7e05a45900e73f$var$useTypeaheadSearch","search","enabledItems","filter","item","currentItem","nextItem","$cc7e05a45900e73f$var$findNextItem","handleOpen","$01b9c$Anchor","$01b9c$babelruntimehelpersesmextends","asChild","$01b9c$Primitive","type","role","$cc7e05a45900e73f$var$shouldShowPlaceholder","onClick","$01b9c$composeEventHandlers","currentTarget","focus","onPointerDown","hasPointerCapture","pointerId","releasePointerCapture","button","ctrlKey","current","x","round","pageX","y","pageY","preventDefault","onKeyDown","isTypingAhead","altKey","metaKey","includes","$cc7e05a45900e73f$var$VALUE_NAME","$cc7e05a45900e73f$export$e288731fd71264f0","className","placeholder","valueProps","hasChildren","$01b9c$useLayoutEffect","pointerEvents","$01b9c$Fragment","$cc7e05a45900e73f$export$99b400cabb58c515","iconProps","$cc7e05a45900e73f$export$b2af6c9944296213","$01b9c$Portal","$cc7e05a45900e73f$var$CONTENT_NAME","$cc7e05a45900e73f$export$c973a4b3cb86a03d","fragment","setFragment","DocumentFragment","frag","$01b9c$createPortal","$cc7e05a45900e73f$var$SelectContentProvider","Slot","$cc7e05a45900e73f$var$SelectContentImpl","$cc7e05a45900e73f$var$CONTENT_MARGIN","$cc7e05a45900e73f$var$useSelectContentContext","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","side","sideOffset","align","alignOffset","arrowPadding","collisionBoundary","collisionPadding","sticky","hideWhenDetached","avoidCollisions","contentProps","content","setContent","viewport","setViewport","node","selectedItem","setSelectedItem","selectedItemText","setSelectedItemText","isPositioned","setIsPositioned","firstValidItemFoundRef","$01b9c$useEffect","$01b9c$hideOthers","$01b9c$useFocusGuards","focusFirst","candidates","firstItem","restItems","lastItem","slice","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","scrollIntoView","scrollTop","scrollHeight","focusSelectedItem","pointerMoveDelta","handlePointerMove","_triggerPointerDownPo","_triggerPointerDownPo2","_triggerPointerDownPo3","_triggerPointerDownPo4","abs","handlePointerUp","contains","removeEventListener","addEventListener","capture","once","close","window","setTimeout","itemRefCallback","isFirstValidItem","handleItemLeave","itemTextRefCallback","SelectPosition","$cc7e05a45900e73f$var$SelectPopperPosition","$cc7e05a45900e73f$var$SelectItemAlignedPosition","popperContentProps","onViewportChange","onItemLeave","$01b9c$RemoveScroll","as","$01b9c$Slot","allowPinchZoom","$01b9c$FocusScope","trapped","onMountAutoFocus","onUnmountAutoFocus","_context$trigger","preventScroll","$01b9c$DismissableLayer","disableOutsidePointerEvents","onFocusOutside","onDismiss","onContextMenu","onPlaced","display","flexDirection","outline","isModifierKey","candidateNodes","currentElement","currentIndex","popperProps","contentContext","contentWrapper","setContentWrapper","shouldExpandOnScrollRef","shouldRepositionRef","triggerRect","getBoundingClientRect","contentRect","valueNodeRect","itemTextRect","itemTextOffset","left","leftDelta","minContentWidth","contentWidth","rightEdge","innerWidth","clampedLeft","$01b9c$clamp","minWidth","right","rightDelta","leftEdge","clampedRight","items","availableHeight","innerHeight","itemsHeight","contentStyles","getComputedStyle","contentBorderTopWidth","borderTopWidth","contentPaddingTop","paddingTop","contentBorderBottomWidth","borderBottomWidth","fullContentHeight","paddingBottom","minContentHeight","offsetHeight","viewportStyles","viewportPaddingTop","viewportPaddingBottom","topEdgeToTriggerMiddle","top","triggerMiddleToBottomEdge","selectedItemHalfHeight","contentTopToItemMiddle","offsetTop","itemMiddleToContentBottom","isLastItem","bottom","viewportOffsetBottom","clientHeight","isFirstItem","concat","minHeight","maxHeight","requestAnimationFrame","contentZIndex","setContentZIndex","zIndex","handleScrollButtonChange","$cc7e05a45900e73f$var$SelectViewportProvider","onScrollButtonChange","boxSizing","$01b9c$Content","$cc7e05a45900e73f$var$useSelectViewportContext","$cc7e05a45900e73f$var$VIEWPORT_NAME","$cc7e05a45900e73f$export$9ed6e7b40248d36d","viewportProps","viewportContext","prevScrollTopRef","dangerouslySetInnerHTML","__html","flex","onScroll","scrolledBy","cssMinHeight","parseFloat","cssHeight","prevHeight","nextHeight","clampedNextHeight","heightDiff","justifyContent","$cc7e05a45900e73f$var$GROUP_NAME","$cc7e05a45900e73f$var$SelectGroupContextProvider","$cc7e05a45900e73f$var$useSelectGroupContext","$cc7e05a45900e73f$export$ee25a334c55de1f4","groupProps","groupId","$cc7e05a45900e73f$var$LABEL_NAME","$cc7e05a45900e73f$export$f67338d29bd972f8","labelProps","groupContext","$cc7e05a45900e73f$var$ITEM_NAME","$cc7e05a45900e73f$var$SelectItemContextProvider","$cc7e05a45900e73f$var$useSelectItemContext","$cc7e05a45900e73f$export$13ef48a934230896","textValue","textValueProp","itemProps","isSelected","setTextValue","isFocused","setIsFocused","_contentContext$itemR","textId","handleSelect","Error","onItemTextChange","prevTextValue","_node$textContent","textContent","trim","ItemSlot","onFocus","onBlur","onPointerUp","onPointerMove","_contentContext$onIte","onPointerLeave","_contentContext$onIte2","_contentContext$searc","$cc7e05a45900e73f$var$ITEM_TEXT_NAME","$cc7e05a45900e73f$export$3572fb0fb821ff49","itemTextProps","itemContext","nativeOptionsContext","itemTextNode","setItemTextNode","_contentContext$itemT","nativeOption","$01b9c$useMemo","$cc7e05a45900e73f$var$ITEM_INDICATOR_NAME","$cc7e05a45900e73f$export$6b9198de19accfe6","itemIndicatorProps","$cc7e05a45900e73f$var$SCROLL_UP_BUTTON_NAME","$cc7e05a45900e73f$export$d8117927658af6d7","canScrollUp1","setCanScrollUp","handleScroll","canScrollUp","$cc7e05a45900e73f$var$SelectScrollButtonImpl","onAutoScroll","$cc7e05a45900e73f$var$SCROLL_DOWN_BUTTON_NAME","$cc7e05a45900e73f$export$ff951e476c12189","canScrollDown1","setCanScrollDown","maxScroll","canScrollDown","ceil","scrollIndicatorProps","autoScrollTimerRef","clearAutoScrollTimer","clearInterval","_activeItem$ref$curre","activeItem","flexShrink","setInterval","_contentContext$onIte3","$cc7e05a45900e73f$export$eba4b1df07cb1d3","separatorProps","selectProps","prevValue","$01b9c$usePrevious","select","selectProto","HTMLSelectElement","getOwnPropertyDescriptor","set","Event","bubbles","dispatchEvent","$01b9c$VisuallyHidden","onSearchChange","handleSearchChange","$01b9c$useCallbackRef","timerRef","updateSearch","clearTimeout","normalizedSearch","char","currentItemIndex","wrappedItems","array","startIndex","_","index","v","toLowerCase","startsWith","displayName","$cc7e05a45900e73f$export$be92b6f5f03c0fe9","$cc7e05a45900e73f$export$41fb9f06171c75f4","$cc7e05a45900e73f$export$4c8d1a57a761ef94","$cc7e05a45900e73f$export$f04a61298a47a40f","$cc7e05a45900e73f$export$602eac185826482c","$cc7e05a45900e73f$export$7c6e2c02157bb7d2","$cc7e05a45900e73f$export$d5c6c08dc2d3ca7","$cc7e05a45900e73f$export$eb2fcfdbd7ba97d4","$cc7e05a45900e73f$export$b04be29aa201d4f5","$cc7e05a45900e73f$export$6d08773d2e66f8f2","$cc7e05a45900e73f$export$d6e5bf9c43ea9319","$cc7e05a45900e73f$export$c3468e2714d175fa","$cc7e05a45900e73f$export$2f60d3ec9ad468f2","$cc7e05a45900e73f$export$bf1aedc3039c8d63","$cc7e05a45900e73f$export$1ff3c3f08ae963c0"],"sourceRoot":""}