{"version":3,"file":"static/js/9025.58698824.chunk.js","mappings":"oPAWA,MAAMA,EAASC,EAAAA,GAITC,GAFcD,EAAAA,GAEAA,EAAAA,IAEdE,EAAgBC,EAAAA,YAGpB,CAAAC,EAAoCC,KAAG,IAAtC,UAAEC,EAAS,SAAEC,KAAaC,GAAOJ,EAAA,OAClCK,EAAAA,EAAAA,MAACT,EAAAA,GAAuB,CACtBK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IACT,0TACAJ,MAEEE,EAAKD,SAAA,CAERA,GACDI,EAAAA,EAAAA,KAACX,EAAAA,GAAoB,CAACY,SAAO,EAAAL,UAC3BI,EAAAA,EAAAA,KAACE,EAAAA,IAAa,CAACP,UAAU,2BAEH,IAE5BJ,EAAcY,YAAcd,EAAAA,GAAAA,YAE5B,MAAMe,EAAuBZ,EAAAA,YAG3B,CAAAa,EAA0BX,KAAG,IAA5B,UAAEC,KAAcE,GAAOQ,EAAA,OACxBL,EAAAA,EAAAA,KAACX,EAAAA,GAA8B,CAC7BK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IACT,uDACAJ,MAEEE,EAAKD,UAETI,EAAAA,EAAAA,KAACM,EAAAA,IAAa,KACiB,IAEnCF,EAAqBD,YAAcd,EAAAA,GAAAA,YAEnC,MAAMkB,EAAyBf,EAAAA,YAG7B,CAAAgB,EAA0Bd,KAAG,IAA5B,UAAEC,KAAcE,GAAOW,EAAA,OACxBR,EAAAA,EAAAA,KAACX,EAAAA,GAAgC,CAC/BK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IACT,uDACAJ,MAEEE,EAAKD,UAETI,EAAAA,EAAAA,KAACS,EAAAA,IAAe,KACiB,IAErCF,EAAuBJ,YACrBd,EAAAA,GAAAA,YAEF,MAAMqB,EAAgBlB,EAAAA,YAGpB,CAAAmB,EAAyDjB,KAAG,IAA3D,UAAEC,EAAS,SAAEC,EAAQ,SAAEgB,EAAW,YAAaf,GAAOc,EAAA,OACvDX,EAAAA,EAAAA,KAACX,EAAAA,GAAsB,CAAAO,UACrBE,EAAAA,EAAAA,MAACT,EAAAA,GAAuB,CACtBK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IACT,scACa,WAAba,GACE,kIACFjB,GAEFiB,SAAUA,KACNf,EAAKD,SAAA,EAETI,EAAAA,EAAAA,KAACI,EAAoB,KACrBJ,EAAAA,EAAAA,KAACX,EAAAA,GAAwB,CACvBM,WAAWI,EAAAA,EAAAA,IACT,MACa,WAAba,GACE,2FACFhB,SAEDA,KAEHI,EAAAA,EAAAA,KAACO,EAAsB,QAEF,IAE3BG,EAAcP,YAAcd,EAAAA,GAAAA,YAERG,EAAAA,YAGlB,CAAAqB,EAA0BnB,KAAG,IAA5B,UAAEC,KAAcE,GAAOgB,EAAA,OACxBb,EAAAA,EAAAA,KAACX,EAAAA,GAAqB,CACpBK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IAAG,oCAAqCJ,MAC/CE,GACJ,IAEQM,YAAcd,EAAAA,GAAAA,YAE1B,MAAMyB,EAAatB,EAAAA,YAGjB,CAAAuB,EAAoCrB,KAAG,IAAtC,UAAEC,EAAS,SAAEC,KAAaC,GAAOkB,EAAA,OAClCjB,EAAAA,EAAAA,MAACT,EAAAA,GAAoB,CACnBK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IACT,4NACAJ,MAEEE,EAAKD,SAAA,EAETI,EAAAA,EAAAA,KAAA,QAAML,UAAU,gEAA+DC,UAC7EI,EAAAA,EAAAA,KAACX,EAAAA,GAA6B,CAAAO,UAC5BI,EAAAA,EAAAA,KAACgB,EAAAA,IAAS,CAACrB,UAAU,iBAGzBK,EAAAA,EAAAA,KAACX,EAAAA,GAAwB,CAAAO,SAAEA,MACN,IAEzBkB,EAAWX,YAAcd,EAAAA,GAAAA,YCrHlB,SAAS4B,EAAsBpB,GAClC,MAAM,UAACqB,EAAS,+BAAEC,EAA8B,KAAEC,EAAI,aAAEC,EAAY,YAAEC,EAAW,WAAEC,GAAc1B,GAE3F,YAAC2B,EAAW,IAAEC,GAAOL,GAGvBM,qBAAqB,0BAACC,EAAyB,kBAAEC,GAAkB,uBACnEC,EAAsB,uBACtBC,IACAC,EAAAA,EAAAA,GAAkB,CAClBb,YACAE,UAGJY,EAAAA,EAAAA,YAAU,KACNb,EAA+BS,EAAkB,GAClD,CAACA,IAEJ,IAAIK,EAAe,GAEnB,OACIjC,EAAAA,EAAAA,KAAAkC,EAAAA,SAAA,CAAAtC,SACKkC,EAAuBK,KAAI,CAACC,EAAWC,KAAO,IAADC,EAC1C,MAAM,MAACC,EAAQ,GAAE,mBAAEC,EAAqB,GAAE,wBAAEC,EAA0B,IAAML,GAEtE,MAACM,EAAK,kBAAEC,GAAqBhB,EAA0BS,EAAUQ,MAEjEC,GAAqBC,EAAAA,EAAAA,GACvBzB,EAAa,oBACgB,IAA7BsB,EAAkBI,QAAgB1B,EAAa,0BAGnD,OACIvB,EAAAA,EAAAA,MAACkD,EAAAA,SAAQ,CAAApD,SAAA,CACJ2C,IAAUN,GAA2C,MAA1BA,EAAeM,KACvCzC,EAAAA,EAAAA,MAAA,OAAKH,UAAWkD,EAAmBjD,SAAA,EAC/BI,EAAAA,EAAAA,KAAA,OAAKL,UAAW0B,EAAa,yBAAyBzB,UAClDI,EAAAA,EAAAA,KAAA,SAAOiD,GAAE,UAAAC,OAAYX,GAAS5C,UAAW0B,EAAa,qBAAqBzB,SACtE4B,EAAYgB,IAAuBP,MAGf,KAA5BQ,IACGzC,EAAAA,EAAAA,KAAA,OAAKL,UAAW0B,EAAa,uBAAuBzB,UAChDI,EAAAA,EAAAA,KAAA,SAAOiD,GAAE,eAAAC,OAAiBX,GAAS5C,UAAW0B,EAAa,gBAAgBzB,SACtE4B,EAAYiB,UAOhCnB,IAAetB,EAAAA,EAAAA,KAACsB,EAAW,CAACc,UAAWA,KAExCtC,EAAAA,EAAAA,MAAA,OAAKH,UAAWkD,EAAmBjD,SAAA,EAC/BE,EAAAA,EAAAA,MAAA,OAAKH,UAAW0B,EAAa,uBAAuBzB,SAAA,EAChDI,EAAAA,EAAAA,KAACmD,EAAAA,EAAK,CAACC,QAAShB,EAAUQ,KAAMjD,UAAW0B,EAAa,gBAAgBzB,SACnE4B,EAAiC,QAAtBc,EAACF,EAAUjC,mBAAW,IAAAmC,EAAAA,EAAI,MAEzCF,EAAUiB,WAAYrD,EAAAA,EAAAA,KAAA,QAAML,UAAW,eAAeC,SAAC,WAE5DE,EAAAA,EAAAA,MAAA,OAAKH,UAAW0B,EAAa,uBAAuBzB,SAAA,CAC/C,MACG,MAAM,QAAC0D,GAAWlB,EAAUmB,WAC5B,YAAgBC,IAAZF,GAEIxD,EAAAA,EAAAA,MAACV,EAAM,CACHwD,KAAMR,EAAUQ,KAEhBa,cAAeC,GACX7B,EAAuB,CACnB,OAAU,eACV,KAAQO,EAAUQ,KAClB,SAAYF,IAGpBA,MAAOA,EAAM9C,SAAA,EAGbI,EAAAA,EAAAA,KAACT,EAAa,CAAC0D,GAAIb,EAAUQ,KAAKhD,UAC9BI,EAAAA,EAAAA,KAACV,EAAW,CAAAM,SAAE8C,GAASjB,EAAI,uBAE/BzB,EAAAA,EAAAA,KAACU,EAAa,CAAAd,SACT0D,EAAQA,QAAQnB,KAAIwB,IACjB3D,EAAAA,EAAAA,KAACc,EAAU,CAAc4B,MAAOiB,EAAO/D,SAClC+D,GADYA,WAUjC3D,EAAAA,EAAAA,KAAC4D,EAAAA,EAAK,CACFC,KAAM,MACF,OAAQzB,EAAUQ,MACd,IAAK,mBACL,IAAK,WACD,MAAO,WACX,QACI,MAAO,OAElB,EARK,GASNK,GAAIb,EAAUQ,KACdA,KAAMR,EAAUQ,KAChBF,MAAOA,EACPoB,SAAUJ,GACN7B,EAAuB,CACnB,OAAU,eACV,KAAQO,EAAUQ,KAClB,SAAYc,EAAMK,OAAOrB,QAGjCsB,OAAQA,IACJnC,EAAuB,CACnB,OAAU,aACV,KAAQO,EAAUQ,OAG1BjD,UAAW0B,EAAa,gBACxB,eAA2C,IAA7BsB,EAAkBI,OAChCkB,SAAU7B,EAAU8B,SACpBC,aAAc/B,EAAUgC,cAGnC,EAhEA,GAiE6B,IAA7BzB,EAAkBI,QACf,MACI,MAAMsB,EAAK,eAAAnB,OAAkBd,EAAUQ,MAEvC,OACI9C,EAAAA,EAAAA,MAAAoC,EAAAA,SAAA,CAAAtC,SAAA,EACII,EAAAA,EAAAA,KAAA,SAAAJ,SAAA,IAAAsD,OAAYmB,EAAK,mCACjBrE,EAAAA,EAAAA,KAAA,QACIiD,GAAIoB,EACJ1E,UAAW,uBACX2E,MAAO,CACH,SAAyC,IAA7B3B,EAAkBI,OAAe,gBAAaS,GAE9D,YAAU,SAAQ5D,SAEjB+C,EAAkBR,KAAI1C,IAAA,IAAC,aAAC8E,GAAa9E,EAAA,OAAK8E,CAAY,QAItE,EAlBD,SAqBXhD,IAAcvB,EAAAA,EAAAA,KAACuB,EAAU,CAACa,UAAWA,MAnH3BC,EAoHJ,KAK/B,CDnCwB7C,EAAAA,YAGtB,CAAAgF,EAA0B9E,KAAG,IAA5B,UAAEC,KAAcE,GAAO2E,EAAA,OACxBxE,EAAAA,EAAAA,KAACX,EAAAA,GAAyB,CACxBK,IAAKA,EACLC,WAAWI,EAAAA,EAAAA,IAAG,2BAA4BJ,MACtCE,GACJ,IAEYM,YAAcd,EAAAA,GAAAA,Y,wBE1If,SAASoF,EAAoB5E,GAGxC,MAAM,UAACqB,EAAS,KAAEE,EAAI,gBAAEsD,EAAe,SAAEC,EAAQ,QAAEC,GAAW/E,GAExD,aAACwB,IAAgBwD,EAAAA,EAAAA,GAAgB,CACnCH,kBACAE,aAGE,IAACE,EAAG,iBAAEC,EAAgB,kBAAEC,EAAiB,iBAAEC,GAAoB/D,GAE/D,IAACO,EAAG,OAAEyD,GAAU9D,GAEfQ,EAAmBuD,IAAwBC,EAAAA,EAAAA,WAAS,GAE3D,OACIpF,EAAAA,EAAAA,KAAC2E,EAAQ,CACAzD,YAAWE,OAAMsD,kBAAiBE,UACvCS,eAAgBN,EAAiBO,OAAO,UACxCC,uBAAuB,EACvBC,WAAY/D,EAAI,cAAc7B,UAE9BI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4BAA2BC,UACtCE,EAAAA,EAAAA,MAAA,OAAKH,UAAS,4DACTsD,GAAG,kBAIJrD,SAAA,EAEAE,EAAAA,EAAAA,MAAA,QAAMmD,GAAG,mBAAmBtD,UAAW,0BAA2B8F,OAAQX,EAAIY,mBACxEC,OAAO,OAAM/F,SAAA,EACfI,EAAAA,EAAAA,KAACiB,EAAqB,CAClBC,UAAWA,EACXC,+BAAgCgE,EAChC/D,KAAMA,EACNC,aAAcA,IAEjB2D,IACGhF,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAYC,UACvBI,EAAAA,EAAAA,KAAA,OAAKL,UAAW0B,EAAa,uBAAuBzB,UAChDI,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAc,YAAU,UAAU,eAAcsF,SAI3EjF,EAAAA,EAAAA,KAAA,OAAKL,UAAW,OAAOC,UACnBI,EAAAA,EAAAA,KAAA,OAAKiD,GAAG,kBAAkBtD,UAAW0B,EAAa,sBAAsBzB,UACpEI,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACHjG,UAAW,SACXkE,KAAK,SACLI,UAAWrC,EAAkBhC,SAE5BsF,EAAO,wBAKxBlF,EAAAA,EAAAA,KAAA,OAAKL,UAAW,8CAA8CC,UACtDI,EAAAA,EAAAA,KAAA,QAAAJ,UACII,EAAAA,EAAAA,KAAA,KAAG6F,KAAMf,EAAIgB,SAASlG,SAAE6B,EAAI,2BAO5D,C","sources":["components/ui/select.tsx","login/pages/shared/UserProfileFormFields.tsx","login/pages/RegisterUserProfile.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {\n  CaretSortIcon,\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"@radix-ui/react-icons\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\n\nimport { cn } from \"lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUpIcon />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDownIcon />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","import {useEffect, Fragment} from \"react\";\nimport type {ClassKey} from \"keycloakify/login/TemplateProps\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useFormValidation} from \"keycloakify/login/lib/useFormValidation\";\nimport type {Attribute} from \"keycloakify/login/kcContext/KcContext\";\nimport type {I18n} from \"../../i18n\";\nimport {Input} from \"../../../components/ui/input\";\nimport {Label} from \"../../../components/ui/label\";\nimport {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from \"../../../components/ui/select\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const {kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField} = props;\n\n    const {advancedMsg, msg} = i18n;\n\n    const {\n        formValidationState: {fieldStateByAttributeName, isFormSubmittable},\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const {group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\"} = attribute;\n\n                const {value, displayableErrors} = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute}/>}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <Label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </Label>\n                                {attribute.required && <span className={\"text-red-500\"}> *</span>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const {options} = attribute.validators;\n                                    if (options !== undefined) {\n                                        return (\n                                            <Select\n                                                name={attribute.name}\n\n                                                onValueChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": value\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n\n                                                <SelectTrigger id={attribute.name}>\n                                                    <SelectValue>{value || msg(\"selectAnOption\")}</SelectValue>\n                                                </SelectTrigger>\n                                                <SelectContent>\n                                                    {options.options.map(option => (\n                                                        <SelectItem key={option} value={option}>\n                                                            {option}\n                                                        </SelectItem>\n                                                    ))}\n                                                </SelectContent>\n                                            </Select>\n                                        );\n                                    }\n\n                                    return (\n                                        <Input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={\"text-red-500 text-xs\"}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({errorMessage}) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute}/>}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}","// ejected using 'npx eject-keycloak-page'\nimport {useState} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {UserProfileFormFields} from \"./shared/UserProfileFormFields\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Button} from \"../../components/ui/button\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, {\n    pageId: \"register-user-profile.ftl\"\n}>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {url, messagesPerField, recaptchaRequired, recaptchaSiteKey} = kcContext;\n\n    const {msg, msgStr} = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"doRegister\")}\n        >\n            <div className=\"lg:p-8 lg:pb-4 flex gap-4\">\n                <div className={`mx-auto flex w-full flex-col justify-center sm:w-[350px] `}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    <form id=\"kc-register-form\" className={\"grid gap-4 items-center\"} action={url.registrationAction}\n                          method=\"post\">\n                        <UserProfileFormFields\n                            kcContext={kcContext}\n                            onIsFormSubmittableValueChange={setIsFormSubmittable}\n                            i18n={i18n}\n                            getClassName={getClassName}\n                        />\n                        {recaptchaRequired && (\n                            <div className=\"form-group\">\n                                <div className={getClassName(\"kcInputWrapperClass\")}>\n                                    <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}/>\n                                </div>\n                            </div>\n                        )}\n                        <div className={\"mt-3\"} >\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                                <Button\n                                    className={\"w-full\"}\n                                    type=\"submit\"\n                                    disabled={!isFormSubmittable}\n                                >\n                                    {msgStr(\"doRegister\")}\n                                </Button>\n                            </div>\n                        </div>\n                    </form>\n                    <div className={\"text-sm mt-3 hover:underline text-slate-500\"}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                    </div>\n                </div>\n            </div>\n        </Template>\n    );\n}\n"],"names":["Select","SelectPrimitive","SelectValue","SelectTrigger","React","_ref","ref","className","children","props","_jsxs","cn","_jsx","asChild","CaretSortIcon","displayName","SelectScrollUpButton","_ref2","ChevronUpIcon","SelectScrollDownButton","_ref3","ChevronDownIcon","SelectContent","_ref4","position","_ref5","SelectItem","_ref6","CheckIcon","UserProfileFormFields","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","_Fragment","map","attribute","i","_attribute$displayNam","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","name","formGroupClassName","clsx","length","Fragment","id","concat","Label","htmlFor","required","options","validators","undefined","onValueChange","event","option","Input","type","onChange","target","onBlur","disabled","readOnly","autoComplete","autocomplete","divId","style","errorMessage","_ref7","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","setIsFormSubmittable","useState","displayMessage","exists","displayRequiredFields","headerNode","action","registrationAction","method","Button","href","loginUrl"],"sourceRoot":""}