{"version":3,"file":"static/js/575.8f99985d.chunk.js","mappings":"kXAyBA,MAAMA,EAAkB,IAAIC,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,mBAE/C,OAApBN,GACAO,QAAQC,IAAI,mBAAoBR,GAEpC,MAAMS,EAAoB,CACtB,WAAaC,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,IAC9B,QAASD,EAAAA,EAAAA,KAACE,EAAAA,EAAe,IACzB,UAAWF,EAAAA,EAAAA,KAACG,EAAAA,EAAuB,IACnC,SAAUH,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,IAC3B,eAAgBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAsB,IACvC,QAASL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IACzB,QAASN,EAAAA,EAAAA,KAACO,EAAAA,EAAe,IACzB,WAAYP,EAAAA,EAAAA,KAACQ,EAAAA,EAAkB,IAC/B,UAAWR,EAAAA,EAAAA,KAACS,EAAAA,EAAiB,IAC7B,QAAST,EAAAA,EAAAA,KAACU,EAAAA,EAAe,IACzB,WAAYV,EAAAA,EAAAA,KAACW,EAAAA,EAAkB,IAC/B,WAAYX,EAAAA,EAAAA,KAACY,EAAAA,EAAmB,KAGrB,SAASC,EAAMC,GAC1B,MAAM,UAACC,EAAS,KAAEC,EAAI,gBAAEC,EAAe,SAAEC,EAAQ,QAAEC,GAAWL,GACxD,aAACM,IAAgBC,EAAAA,EAAAA,GAAgB,CACnCJ,kBACAE,aAGE,OAACG,EAAM,MAAEC,EAAK,IAAEC,EAAG,eAAEC,EAAc,MAAEC,EAAK,KAAEC,EAAI,qBAAEC,GAAwBb,GAE1E,IAACc,EAAG,OAAEC,GAAUd,GACtBe,EAAAA,EAAAA,GAASf,EAAKc,OAAO,aAAcf,EAAUQ,MAAMS,cACnD,MAAOC,EAAuBC,IAA4BC,EAAAA,EAAAA,WAAS,GAE7DC,GAAWC,EAAAA,EAAAA,IAAoDC,IAAM,IAADC,EACtED,EAAEE,iBAEFN,GAAyB,GAEzB,MAAMO,EAAcH,EAAEI,OAI0B,QAAhDH,EAAAE,EAAYE,cAAc,8BAAsB,IAAAJ,GAAhDA,EAAkDK,aAAa,OAAQ,YAEvEH,EAAYI,QAAQ,IAGxB,OACI7C,EAAAA,EAAAA,KAACkB,EAAQ,CACAH,YAAWC,OAAMC,kBAAiBE,UACvC2B,YAAaxB,EAAOwB,YACpBC,YAAaxB,EAAMyB,eAAiCC,IAArB3B,EAAO4B,UACtCC,WAAYtB,EAAI,WAChBuB,SACI7B,EAAMyB,UACNzB,EAAM8B,sBACLzB,IACG0B,EAAAA,EAAAA,MAAA,OAAKC,GAAG,kBAAkBC,UAAW,sDAAsDC,SAAA,EACvFzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACF,UAAW,eACtBF,EAAAA,EAAAA,MAAA,QAAME,UAAW,yBAAyBC,SAAA,CACrC5B,EAAI,aAAa,IAAE,KACpB7B,EAAAA,EAAAA,KAAA,KAAG2D,SAAU,EAAGjE,KAAM8B,EAAIoC,gBAAiBJ,UAAW,iBAAiBC,SAClE5B,EAAI,sBAKxB4B,UAKDH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYC,SAAA,EACvBzD,EAAAA,EAAAA,KAAA,OAAKwD,UAAS,8CACTD,GAAG,kBAIJE,SAEClC,EAAMyB,WACHM,EAAAA,EAAAA,MAAA,QAAMC,GAAG,gBAAgBnB,SAAUA,EAAUyB,OAAQrC,EAAIsC,YAAaC,OAAO,OACvEP,UAAW,wDAAwDC,SAAA,EACrEzD,EAAAA,EAAAA,KAAA,OAAKwD,UAAW,mDAAmDC,UAC7DhC,GACE,CAACuC,IACG,MAAMC,EAAS1C,EAAM2C,sBAEf3C,EAAM4C,4BACF,QACA,kBAHJ,WAKAC,EAA6C,oBAAVH,EAA8B,WAAaA,EAEpF,OACIX,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4CAA2CC,SAAA,EACtDH,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,QAAQ,qBAAoBb,SAAA,CAAC,IAAE5B,EAAIoC,OAC1CjE,EAAAA,EAAAA,KAACuE,EAAAA,EAAK,CACFZ,SAAU,EACVJ,GAAIa,EACJZ,UAAWpC,EAAa,gBACxBoD,KAAMJ,EACNK,aAA4B,QAAhBT,EAAEtC,EAAMgD,gBAAQ,IAAAV,EAAAA,EAAI,GAChCW,KAAK,OACLC,WAAW,EACXC,aAAa,UAK5B,EAzBD,MA2BRvB,EAAAA,EAAAA,MAAA,OAAKE,UAAW,mDAAmDC,SAAA,EAC/DH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4CAA2CC,SAAA,EACtDzD,EAAAA,EAAAA,KAACqE,EAAAA,EAAK,CAACC,QAAQ,WAAUb,SAAE5B,EAAI,eAC/B7B,EAAAA,EAAAA,KAACuE,EAAAA,EAAK,CACFZ,SAAU,EACVJ,GAAG,WACHiB,KAAK,WACLG,KAAK,WACLE,aAAa,WAGpBtD,EAAMuD,uBACH9E,EAAAA,EAAAA,KAAA,QACIwD,UAAW,uFAAuFC,UAC9FzD,EAAAA,EAAAA,KAAA,KAAG2D,SAAU,EAAGjE,KAAM8B,EAAIuD,yBAAyBtB,SAC9C5B,EAAI,4BAKzB7B,EAAAA,EAAAA,KAAA,OAAKwD,UAAW,mDAAmDC,UAC/DzD,EAAAA,EAAAA,KAAA,OAAKuD,GAAG,kBAAiBE,SACpBlC,EAAMyD,aAAevD,IAClB6B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,8BAA6BC,SAAA,EACxCzD,EAAAA,EAAAA,KAACiF,EAAAA,EAAQ,CAAC1B,GAAG,SAAS2B,eAAqC,OAArBxD,EAAMsD,cAC5ChF,EAAAA,EAAAA,KAAA,SACIsE,QAAQ,SACRd,UAAU,6FAA4FC,SAErG5B,EAAI,wBASzB7B,EAAAA,EAAAA,KAAA,SACI2E,KAAK,SACLpB,GAAG,kBACHiB,KAAK,uBAC6BvB,KAAzB,OAAJtB,QAAI,IAAJA,OAAI,EAAJA,EAAMwD,oBACL,CACE,MAASxD,EAAKwD,oBAEhB,CAAC,KAEXnF,EAAAA,EAAAA,KAACoF,EAAAA,EAAM,CACHzB,SAAU,EACVa,KAAK,QACLjB,GAAG,WACHoB,KAAK,SACLnB,UAAW,gBACX6B,SAAUpD,EAAsBwB,SAE/B3B,EAAO,kBAQvBP,EAAMyB,eAAiCC,IAArB3B,EAAO4B,YACtBI,EAAAA,EAAAA,MAAA,OACIC,GAAG,sBACHC,UAAW,oBAAoBC,SAAA,EAE/BzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAAC4B,YAAY,cACvBtF,EAAAA,EAAAA,KAAA,OACIwD,UAAW,sDAAsDC,SAEhEnC,EAAO4B,UAAUqC,KAAIC,IACdlC,EAAAA,EAAAA,MAAC8B,EAAAA,EAAM,CAACK,QAASA,IAAMjG,OAAOkG,KAAKF,EAAEG,UAAWpC,GAAE,UAAAqC,OAAYJ,EAAEK,OAExDrC,UAAS,GAAAoC,QAAKE,EAAAA,EAAAA,GAAe,CAACC,QAAS,cAAa,uCAAsCtC,SAAA,CAE7F1D,EAAkByF,EAAEQ,aACrBhG,EAAAA,EAAAA,KAAA,QAAAyD,SAAO+B,EAAExD,gBAJAwD,EAAEQ,uBAanD,C","sources":["login/pages/Login.tsx"],"sourcesContent":["import {useState, type FormEventHandler} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\nimport {Button, buttonVariants} from \"../../components/ui/button\";\nimport {Checkbox} from \"../../components/ui/checkbox\";\nimport {cn} from \"../../lib/utils\";\nimport {Label} from \"../../components/ui/label\";\nimport {Separator} from \"../../components/ui/separator\";\nimport {GitHubLogoIcon} from '@radix-ui/react-icons'\nimport {\n    IconBrandBitbucket,\n    IconBrandFacebook, IconBrandFacebookFilled, IconBrandGithub, IconBrandGitlab,\n    IconBrandGoogle, IconBrandInstagram, IconBrandLinkedin, IconBrandOpenSource, IconBrandPaypal,\n    IconBrandStackoverflow,\n    IconBrandTwitter,\n    IconBrandWindows,\n    IconWindow\n} from \"@tabler/icons-react\";\nimport {useTitle} from \"react-use\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\nconst prividerIdIconMap = {\n    \"microsoft\": <IconBrandWindows/>,\n    \"google\":<IconBrandGoogle/>,\n    \"facebook\":<IconBrandFacebookFilled/>,\n    \"twitter\":<IconBrandTwitter/>,\n    \"stackoverflow\":<IconBrandStackoverflow/>,\n    \"gitlab\":<IconBrandGitlab/>,\n    \"paypal\":<IconBrandPaypal/>,\n    \"instagram\":<IconBrandInstagram/>,\n    \"linkedin\":<IconBrandLinkedin/>,\n    \"github\":<IconBrandGithub/>,\n    \"bitbucket\":<IconBrandBitbucket/>,\n    \"openshift\":<IconBrandOpenSource/>\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {social, realm, url, usernameHidden, login, auth, registrationDisabled} = kcContext;\n\n    const {msg, msgStr} = i18n;\n    useTitle(i18n.msgStr(\"loginTitle\", kcContext.realm.displayName))\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\" className={\"justify-center items-center text-center mb-3 w-full\"}>\n                        <Separator className={\"mb-1 mt-1\"}/>\n                        <span className={\"text-slate-500 text-sm\"}>\n                            {msg(\"noAccount\")} {' '}\n                            <a tabIndex={6} href={url.registrationUrl} className={\"text-slate-950\"}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"flex gap-4\">\n                <div className={`mx-auto flex w-full flex-col justify-center`}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\"\n                              className={\"flex flex-col gap-3 items-center w-full min-w-[350px]\"}>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                                <Label htmlFor=\"autoCompleteHelper\"> {msg(label)}</Label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n\n                                            </div>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                    <Label htmlFor=\"password\">{msg(\"password\")}</Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                                {realm.resetPasswordAllowed && (\n                                    <span\n                                        className={\"text-sm mt-1 w-full text-slate-500 w-full text-center items-start flex justify-start\"}>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                )}\n                            </div>\n                            <div className={\"w-full flex flex-col items-center justify-center\"}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Checkbox id=\"terms2\" defaultChecked={login.rememberMe === \"on\"}/>\n                                            <label\n                                                htmlFor=\"terms2\"\n                                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                            >\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n\n                                    )}\n                                </div>\n\n                            </div>\n\n                            <input\n                                type=\"hidden\"\n                                id=\"id-hidden-input\"\n                                name=\"credentialId\"\n                                {...(auth?.selectedCredential !== undefined\n                                    ? {\n                                        \"value\": auth.selectedCredential\n                                    }\n                                    : {})}\n                            />\n                            <Button\n                                tabIndex={4}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                className={\"min-w-[200px]\"}\n                                disabled={isLoginButtonDisabled}\n                            >\n                                {msgStr(\"doLogIn\")}\n                            </Button>\n\n\n                        </form>\n                    )}\n\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={'flex gap-4 w-auto'}\n                    >\n                        <Separator orientation=\"vertical\"/>\n                        <div\n                            className={\"grid flex-col flex-wrap grid-cols-2 gap-2 w-[320px]\"}\n                        >\n                            {social.providers.map(p => (\n                                    <Button onClick={() => window.open(p.loginUrl)} id={`zocial-${p.alias}`}\n                                            key={p.providerId}\n                                            className={`${buttonVariants({variant: \"secondary\"})} w-[160px] flex justify-start gap-2`}>\n                                        {/*@ts-ignore*/}\n                                        {prividerIdIconMap[p.providerId]}\n                                        <span>{p.displayName}</span>\n                                    </Button>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["my_custom_param","URL","window","location","href","searchParams","get","console","log","prividerIdIconMap","_jsx","IconBrandWindows","IconBrandGoogle","IconBrandFacebookFilled","IconBrandTwitter","IconBrandStackoverflow","IconBrandGitlab","IconBrandPaypal","IconBrandInstagram","IconBrandLinkedin","IconBrandGithub","IconBrandBitbucket","IconBrandOpenSource","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","useTitle","displayName","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","_jsxs","id","className","children","Separator","tabIndex","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","Label","htmlFor","Input","name","defaultValue","username","type","autoFocus","autoComplete","resetPasswordAllowed","loginResetCredentialsUrl","rememberMe","Checkbox","defaultChecked","selectedCredential","Button","disabled","orientation","map","p","onClick","open","loginUrl","concat","alias","buttonVariants","variant","providerId"],"sourceRoot":""}