{"version":3,"file":"static/js/575.ec15c1b8.chunk.js","mappings":"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","sources":["login/pages/Login.tsx"],"sourcesContent":["import {useState, type FormEventHandler} from \"react\";\nimport {clsx} from \"keycloakify/tools/clsx\";\nimport {useConstCallback} from \"keycloakify/tools/useConstCallback\";\nimport type {PageProps} from \"keycloakify/login/pages/PageProps\";\nimport {useGetClassName} from \"keycloakify/login/lib/useGetClassName\";\nimport type {KcContext} from \"../kcContext\";\nimport type {I18n} from \"../i18n\";\nimport {Input} from \"components/ui/input\";\nimport {Button, buttonVariants} from \"../../components/ui/button\";\nimport {Checkbox} from \"../../components/ui/checkbox\";\nimport {cn} from \"../../lib/utils\";\nimport {Label} from \"../../components/ui/label\";\nimport {Separator} from \"../../components/ui/separator\";\nimport {GitHubLogoIcon} from '@radix-ui/react-icons'\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const {kcContext, i18n, doUseDefaultCss, Template, classes} = props;\n\n    const {getClassName} = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const {social, realm, url, usernameHidden, login, auth, registrationDisabled} = kcContext;\n\n    const {msg, msgStr} = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{kcContext, i18n, doUseDefaultCss, classes}}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\" className={\"justify-center items-center text-center\"}>\n                        <Separator className={\"mb-3\"}/>\n                        <span className={\"text-slate-500 text-sm\"}>\n                            {msg(\"noAccount\")} {' '}\n                            <a tabIndex={6} href={url.registrationUrl} className={\"text-slate-950\"}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n\n            {/*<div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>*/}\n            {/*    <div*/}\n            <div className=\"flex gap-4 mb-3\">\n                <div className={`mx-auto flex w-full flex-col justify-center sm:w-[350px] `}\n                     id=\"kc-form-wrapper\"\n                    // className={clsx(\n                    //     realm.password &&\n                    //     social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    // )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\"\n                              className={\"grid gap-3 items-center\"}>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                                <Label htmlFor=\"autoCompleteHelper\"> {msg(label)}</Label>\n                                                <Input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </div>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n\n                                <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n                                    <Label htmlFor=\"password\">{msg(\"password\")}</Label>\n                                    <Input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Checkbox id=\"terms2\" defaultChecked={login.rememberMe === \"on\"}/>\n                                            <label\n                                                htmlFor=\"terms2\"\n                                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                            >\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n\n                                    )}\n                                </div>\n\n                            </div>\n\n                            <input\n                                type=\"hidden\"\n                                id=\"id-hidden-input\"\n                                name=\"credentialId\"\n                                {...(auth?.selectedCredential !== undefined\n                                    ? {\n                                        \"value\": auth.selectedCredential\n                                    }\n                                    : {})}\n                            />\n                            <Button\n                                tabIndex={4}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                disabled={isLoginButtonDisabled}\n                            >\n                                {msgStr(\"doLogIn\")}\n                            </Button>\n\n\n                        </form>\n                    )}\n                    {realm.resetPasswordAllowed && (\n                        <span className={\"text-sm mt-3 text-slate-500\"}>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={'flex gap-4'}\n                    >\n\n                        <Separator orientation=\"vertical\"/>\n                        <ul\n                            className={\"grid grid-cols-2 gap-2\"}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <Button onClick={() => window.open(p.loginUrl)} id={`zocial-${p.alias}`}\n                                            className={`${buttonVariants({variant: \"secondary\"})} w-full flex justify-start gap-2`}>\n                                        <GitHubLogoIcon/>\n                                        <span>{p.displayName}</span>\n                                    </Button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["my_custom_param","URL","window","location","href","searchParams","get","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","_jsx","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","_jsxs","id","className","children","Separator","tabIndex","registrationUrl","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","Label","htmlFor","Input","name","defaultValue","username","type","autoFocus","autoComplete","clsx","rememberMe","Checkbox","defaultChecked","selectedCredential","Button","disabled","resetPasswordAllowed","loginResetCredentialsUrl","orientation","map","p","onClick","open","loginUrl","concat","alias","buttonVariants","variant","GitHubLogoIcon","displayName","providerId","console","log"],"sourceRoot":""}